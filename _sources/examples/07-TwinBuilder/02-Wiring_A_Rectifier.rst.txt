
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\07-TwinBuilder\02-Wiring_A_Rectifier.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_07-TwinBuilder_02-Wiring_A_Rectifier.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_07-TwinBuilder_02-Wiring_A_Rectifier.py:


Twin Builder: wiring a rectifier with a capacitor filter
---------------------------------------------------------
This example shows how you can use PyAEDT to create a Twin Builder design
and run a Twin Builder time-domain simulation.

.. GENERATED FROM PYTHON SOURCE LINES 9-12

Perform required imputs
~~~~~~~~~~~~~~~~~~~~~~~
Perform the required imports.

.. GENERATED FROM PYTHON SOURCE LINES 12-18

.. code-block:: default


    import os
    import math
    import matplotlib.pyplot as plt
    from pyaedt import TwinBuilder








.. GENERATED FROM PYTHON SOURCE LINES 19-28

Select version and set launch options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Select the Twin Builder version and set launch options. The following code
launches Twin Builder 2022 R2 in graphical mode.

You can change the Boolean parameter ``non_graphical`` to ``True`` to launch
Twin Builder in non-graphical mode. You can also change the Boolean parameter
``new_thread`` to ``False`` to launch Twin Builder in an existing AEDT session
if one is running.

.. GENERATED FROM PYTHON SOURCE LINES 28-33

.. code-block:: default


    desktop_version = "2022.2"
    non_graphical = os.getenv("PYAEDT_NON_GRAPHICAL", "False").lower() in ("true", "1", "t")
    new_thread = True








.. GENERATED FROM PYTHON SOURCE LINES 34-38

Launch Twin Builder
~~~~~~~~~~~~~~~~~~~
Launch Twin Builder using an implicit declaration and add a new design with
a default setup.

.. GENERATED FROM PYTHON SOURCE LINES 38-41

.. code-block:: default


    tb = TwinBuilder(specified_version=desktop_version, non_graphical=non_graphical, new_desktop_session=new_thread)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Logger Started
    pyaedt info: Launching PyAEDT outside AEDT with CPython and PythonNET.
    pyaedt info: AEDT installation Path C:\Program Files\AnsysEM\v222\Win64.
    pyaedt info: Launching AEDT with module PythonNET.
    pyaedt info: Ansoft.ElectronicsDesktop.2022.2 Started with process ID 13240.
    pyaedt info: Logger file D:\Temp\pyaedt20220722_091734.log in use.
    pyaedt info: pyaedt v0.5.9
    pyaedt info: Python version 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)]
    pyaedt info: Project Project52 has been created.
    pyaedt info: No design is present. Inserting a new design.
    pyaedt info: Added design 'Twin Builder_8LR' of type Twin Builder.
    pyaedt info: Aedt Objects initialized
    pyaedt info: Variable Manager initialized
    pyaedt info: Design Loaded
    pyaedt info: Successfully loaded project materials !
    pyaedt info: Materials Loaded




.. GENERATED FROM PYTHON SOURCE LINES 42-45

Create components for bridge rectifier with capacitor filter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create components for a bridge rectifier with a capacitor filter.

.. GENERATED FROM PYTHON SOURCE LINES 45-73

.. code-block:: default

 
    # Define the grid distance for ease in calculations.

    G = 0.00254

    # Create an AC sinosoidal source component.

    source = tb.modeler.schematic.create_voltage_source("V_AC", "ESINE", 100, 50, [-1 * G, 0])

    # Create the four diodes of the bridge rectifier.

    diode1 = tb.modeler.schematic.create_diode("D1", [10 * G, 6 * G], 3 * math.pi / 2)
    diode2 = tb.modeler.schematic.create_diode("D2", [20 * G, 6 * G], 3 * math.pi / 2)
    diode3 = tb.modeler.schematic.create_diode("D3", [10 * G, -4 * G], 3 * math.pi / 2)
    diode4 = tb.modeler.schematic.create_diode("D4", [20 * G, -4 * G], 3 * math.pi / 2)

    # Create a capacitor filter.

    capacitor = tb.modeler.schematic.create_capacitor("C_FILTER", 1e-6, [29 * G, -10 * G])

    # Create a load resistor.

    resistor = tb.modeler.schematic.create_resistor("RL", 100000, [39 * G, -10 * G])

    # Create a ground.

    gnd = tb.modeler.components.create_gnd([5 * G, -16 * G])








.. GENERATED FROM PYTHON SOURCE LINES 74-77

Connect components
~~~~~~~~~~~~~~~~~~
Connect components with wires.

.. GENERATED FROM PYTHON SOURCE LINES 77-104

.. code-block:: default


    # Wire the diode bridge.

    tb.modeler.schematic.create_wire([diode1.pins[0].location, diode3.pins[0].location])
    tb.modeler.schematic.create_wire([diode2.pins[1].location, diode4.pins[1].location])
    tb.modeler.schematic.create_wire([diode1.pins[1].location, diode2.pins[0].location])
    tb.modeler.schematic.create_wire([diode3.pins[1].location, diode4.pins[0].location])

    # Wire the AC source.

    tb.modeler.schematic.create_wire([source.pins[1].location, [0, 10 * G], [15 * G, 10 * G], [15 * G, 5 * G]])
    tb.modeler.schematic.create_wire([source.pins[0].location, [0, -10 * G], [15 * G, -10 * G], [15 * G, -5 * G]])

    # Wire the filter capacitor and load resistor.

    tb.modeler.schematic.create_wire([resistor.pins[0].location, [40 * G, 0], [22 * G, 0]])
    tb.modeler.schematic.create_wire([capacitor.pins[0].location, [30 * G, 0]])

    # Wire the ground.

    tb.modeler.schematic.create_wire([resistor.pins[1].location, [40 * G, -15 * G], gnd.pins[0].location])
    tb.modeler.schematic.create_wire([capacitor.pins[1].location, [30 * G, -15 * G]])
    tb.modeler.schematic.create_wire([gnd.pins[0].location, [5 * G, 0], [8 * G, 0]])

    # Zoom to fit the schematic
    tb.modeler.zoom_to_fit()








.. GENERATED FROM PYTHON SOURCE LINES 105-108

Parametrize transient setup
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Parametrize the default transient setup by setting the end time.

.. GENERATED FROM PYTHON SOURCE LINES 108-111

.. code-block:: default


    tb.set_end_time("100ms")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 112-115

Solve transient setup
~~~~~~~~~~~~~~~~~~~~~~~~~
Solve the transient setup.

.. GENERATED FROM PYTHON SOURCE LINES 115-119

.. code-block:: default


    tb.analyze_setup("TR")






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Solving design setup TR
    pyaedt info: Design setup TR solved correctly

    True



.. GENERATED FROM PYTHON SOURCE LINES 120-125

Get report data and plot using Matplotlib
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get report data and plot it using Matplotlib. The following code gets and plots
the values for the voltage on the pulse voltage source and the values for the
voltage on the capacitor in the RC circuit.

.. GENERATED FROM PYTHON SOURCE LINES 125-139

.. code-block:: default


    E_Value = "V_AC.V"
    x = tb.post.get_solution_data(E_Value, "TR", "Time")
    plt.plot(x.intrinsics["Time"], x.data_real(E_Value))

    R_Value = "RL.V"
    x = tb.post.get_solution_data(R_Value, "TR", "Time")
    plt.plot(x.intrinsics["Time"], x.data_real(R_Value))

    plt.grid()
    plt.xlabel("Time")
    plt.ylabel("AC to DC Conversion using Rectifier")
    plt.show()




.. image-sg:: /examples/07-TwinBuilder/images/sphx_glr_02-Wiring_A_Rectifier_001.png
   :alt: 02 Wiring A Rectifier
   :srcset: /examples/07-TwinBuilder/images/sphx_glr_02-Wiring_A_Rectifier_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.




.. GENERATED FROM PYTHON SOURCE LINES 140-144

Close Twin Builder
~~~~~~~~~~~~~~~~~~
After the simulaton is completed, you can close Twin Builder or release it.
All methods provide for saving the project before closing.

.. GENERATED FROM PYTHON SOURCE LINES 144-147

.. code-block:: default


    if os.name != "posix":
        tb.release_desktop()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  15.323 seconds)


.. _sphx_glr_download_examples_07-TwinBuilder_02-Wiring_A_Rectifier.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 02-Wiring_A_Rectifier.py <02-Wiring_A_Rectifier.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 02-Wiring_A_Rectifier.ipynb <02-Wiring_A_Rectifier.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
