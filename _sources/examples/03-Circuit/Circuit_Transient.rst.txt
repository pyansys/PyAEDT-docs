
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\03-Circuit\Circuit_Transient.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_03-Circuit_Circuit_Transient.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_03-Circuit_Circuit_Transient.py:


Circuit: transient analysis and eye plot
----------------------------------------
This example shows how you can use PyAEDT to create a circuit design,
run a Nexxim time-domain simulation, and create an eye diagram.

.. GENERATED FROM PYTHON SOURCE LINES 8-11

Perform the required imports
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Perform the required imports.

.. GENERATED FROM PYTHON SOURCE LINES 11-17

.. code-block:: default


    import os
    from matplotlib import pyplot as plt
    import numpy as np
    from pyaedt import Circuit








.. GENERATED FROM PYTHON SOURCE LINES 18-21

Set non-graphical mode
~~~~~~~~~~~~~~~~~~~~~~
Set non-graphical mode. The default is ``False``.

.. GENERATED FROM PYTHON SOURCE LINES 21-24

.. code-block:: default


    non_graphical = os.getenv("PYAEDT_NON_GRAPHICAL", "False").lower() in ("true", "1", "t")








.. GENERATED FROM PYTHON SOURCE LINES 25-28

Launch AEDT with Circuit
~~~~~~~~~~~~~~~~~~~~~~~~
Launch AEDT 2022 R2 in graphical mode with Circuit.

.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: default


    cir = Circuit(specified_version="2022.2", new_desktop_session=True, non_graphical=non_graphical)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Logger Started
    pyaedt info: Launching PyAEDT outside AEDT with CPython and PythonNET.
    pyaedt info: AEDT installation Path C:\Program Files\AnsysEM\v222\Win64.
    pyaedt info: Launching AEDT with module PythonNET.
    pyaedt info: Ansoft.ElectronicsDesktop.2022.2 Started with process ID 5724.
    pyaedt info: Logger file D:\Temp\pyaedt20220722_091734.log in use.
    pyaedt info: pyaedt v0.5.9
    pyaedt info: Python version 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)]
    pyaedt info: Project Project51 has been created.
    pyaedt info: No design is present. Inserting a new design.
    pyaedt info: Added design 'Circuit Design_1EW' of type Circuit Design.
    pyaedt info: Aedt Objects initialized
    pyaedt info: Variable Manager initialized
    pyaedt info: Design Loaded
    pyaedt info: Successfully loaded project materials !
    pyaedt info: Materials Loaded




.. GENERATED FROM PYTHON SOURCE LINES 33-36

Read IBIS file
~~~~~~~~~~~~~~
Read an IBIS file and place a buffer in the schematic.

.. GENERATED FROM PYTHON SOURCE LINES 36-40

.. code-block:: default


    ibis = cir.get_ibis_model_from_file(os.path.join(cir.desktop_install_dir, 'buflib', 'IBIS', 'u26a_800.ibs'))
    ibs = ibis.buffers["DQ_u26a_800"].insert(0, 0)








.. GENERATED FROM PYTHON SOURCE LINES 41-44

Place ideal transmission line
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Place an ideal transmission line in the schematic and parametrize it.

.. GENERATED FROM PYTHON SOURCE LINES 44-48

.. code-block:: default


    tr1 = cir.modeler.components.components_catalog["Ideal Distributed:TRLK_NX"].place("tr1")
    tr1.parameters["P"] = "50mm"








.. GENERATED FROM PYTHON SOURCE LINES 49-52

Create resistor and ground
~~~~~~~~~~~~~~~~~~~~~~~~~
Create a resistor and ground in the schematic.

.. GENERATED FROM PYTHON SOURCE LINES 52-57

.. code-block:: default


    res = cir.modeler.components.create_resistor("R1", "1Meg")
    gnd1 = cir.modeler.components.create_gnd()









.. GENERATED FROM PYTHON SOURCE LINES 58-61

Connect elements
~~~~~~~~~~~~~~~~
Connect elements in the schematic.

.. GENERATED FROM PYTHON SOURCE LINES 61-66

.. code-block:: default


    tr1.pins[0].connect_to_component(ibs.pins[0])
    tr1.pins[1].connect_to_component(res.pins[0])
    res.pins[1].connect_to_component(gnd1.pins[0])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 67-70

Place probe
~~~~~~~~~
Place a probe and rename it to ``Vout``.

.. GENERATED FROM PYTHON SOURCE LINES 70-75

.. code-block:: default


    pr1 = cir.modeler.components.components_catalog["Probes:VPROBE"].place("vout")
    pr1.parameters["Name"] = "Vout"
    pr1.pins[0].connect_to_component(res.pins[0])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 76-79

Create setup and analyze
~~~~~~~~~~~~~~~~~~~~~~~~
Create a transient analysis setup and analyze it.

.. GENERATED FROM PYTHON SOURCE LINES 79-85

.. code-block:: default


    trans_setup = cir.create_setup("TransientRun", "NexximTransient")
    trans_setup.props["TransientData"] = ["0.01ns", "200ns"]
    cir.analyze_setup("TransientRun")






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Solving design setup TransientRun
    pyaedt info: Design setup TransientRun solved correctly

    True



.. GENERATED FROM PYTHON SOURCE LINES 86-91

Create report outside AEDT
~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a report outside AEDT using the ``get_solution_data`` method. This
method allows you to get solution data and plot it outside AEDT without needing
a UI.

.. GENERATED FROM PYTHON SOURCE LINES 91-98

.. code-block:: default


    report = cir.post.create_report("V(Vout)", domain="Time")
    if not non_graphical:
        report.add_cartesian_y_marker(0)
    solutions = cir.post.get_solution_data("V(Vout)", domain="Time")
    solutions.plot()




.. image-sg:: /examples/03-Circuit/images/sphx_glr_Circuit_Transient_001.png
   :alt: Simulation Results Plot
   :srcset: /examples/03-Circuit/images/sphx_glr_Circuit_Transient_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Solution Data Correctly Loaded.

    <Figure size 2000x1000 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 99-104

Create report inside AEDT
~~~~~~~~~~~~~~~~~~~~~~~~~
Create a report inside AEDT using the ``new_report`` object. This object is
fully customizable and usable with most of the reports available in AEDT.
The standard report is the main one used in Circuit and Twin Builder.

.. GENERATED FROM PYTHON SOURCE LINES 104-123

.. code-block:: default


    new_report = cir.post.reports_by_category.standard("V(Vout)")
    new_report.domain = "Time"
    new_report.create()
    if not non_graphical:
        new_report.add_limit_line_from_points([60, 80], [1, 1], "ns", "V")
        vout = new_report.traces[0]
        vout.set_trace_properties(trace_style=vout.LINESTYLE.Dot, width=2, trace_type=vout.TRACETYPE.Continuous,
                                  color=(0, 0, 255))
        vout.set_symbol_properties(style=vout.SYMBOLSTYLE.Circle, fill=True, color=(255, 255, 0))
        ll = new_report.limit_lines[0]
        ll.set_line_properties(style=ll.LINESTYLE.Solid, width=4, hatch_above=True, violation_emphasis=True, hatch_pixels=2,
                               color=(0, 0, 255))
    new_report.time_start = "20ns"
    new_report.time_stop = "100ns"
    new_report.create()
    sol = new_report.get_solution_data()
    sol.plot()




.. image-sg:: /examples/03-Circuit/images/sphx_glr_Circuit_Transient_002.png
   :alt: Simulation Results Plot
   :srcset: /examples/03-Circuit/images/sphx_glr_Circuit_Transient_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Solution Data Correctly Loaded.

    <Figure size 2000x1000 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 124-127

Create eye diagram inside AEDT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create an eye diagram inside AEDT using the ``new_report`` object. 

.. GENERATED FROM PYTHON SOURCE LINES 127-133

.. code-block:: default


    new_eye = cir.post.reports_by_category.eye_diagram("V(Vout)")
    new_eye.unit_interval = "1e-9s"
    new_eye.time_stop = "100ns"
    new_eye.create()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 134-138

Create eye diagram outside AEDT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create the same eye diagram outside AEDT using Matplotlib and the
``get_solution_data`` method.

.. GENERATED FROM PYTHON SOURCE LINES 138-166

.. code-block:: default


    unit_interval = 1
    offset = 0.25
    tstop = 200
    tstart = 0
    t_steps = []
    i = tstart + offset
    while i < tstop:
        i += 2 * unit_interval
        t_steps.append(i)

    t = [[i for i in solutions.intrinsics["Time"] if k - 2 * unit_interval < i <= k] for k in
         t_steps]
    ys = [[i / 1000 for i, j in zip(solutions.data_real(), solutions.intrinsics["Time"]) if
           k - 2 * unit_interval < j <= k] for k in t_steps]
    fig, ax = plt.subplots(sharex=True)
    cellst = np.array([])
    cellsv = np.array([])
    for a, b in zip(t, ys):
        an = np.array(a)
        an = an - an.mean()
        bn = np.array(b)
        cellst = np.append(cellst, an)
        cellsv = np.append(cellsv, bn)
    plt.plot(cellst.T,  cellsv.T, zorder=0)
    plt.show()





.. image-sg:: /examples/03-Circuit/images/sphx_glr_Circuit_Transient_003.png
   :alt: Circuit Transient
   :srcset: /examples/03-Circuit/images/sphx_glr_Circuit_Transient_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 167-170

Release AEDT
~~~~~~~~~~~~
Release AEDT.

.. GENERATED FROM PYTHON SOURCE LINES 170-172

.. code-block:: default


    cir.release_desktop()




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  17.231 seconds)


.. _sphx_glr_download_examples_03-Circuit_Circuit_Transient.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: Circuit_Transient.py <Circuit_Transient.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: Circuit_Transient.ipynb <Circuit_Transient.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
