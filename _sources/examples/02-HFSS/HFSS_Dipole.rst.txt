
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\02-HFSS\HFSS_Dipole.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_02-HFSS_HFSS_Dipole.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-HFSS_HFSS_Dipole.py:


HFSS: dipole antenna
--------------------
This example shows how you can use PyAEDT to create a dipole antenna in HFSS and postprocess results.

.. GENERATED FROM PYTHON SOURCE LINES 6-22

.. code-block:: default

    # Perform required imports
    # ~~~~~~~~~~~~~~~~~~~~~~~~
    # Perform required imports.

    import os
    import tempfile
    from pyaedt import Hfss
    from pyaedt import Desktop
    from pyaedt import generate_unique_name

    tmpfold = tempfile.gettempdir()

    temp_folder = os.path.join(tmpfold, generate_unique_name("Example"))
    if not os.path.exists(temp_folder):
        os.mkdir(temp_folder)








.. GENERATED FROM PYTHON SOURCE LINES 23-26

Set non-graphical mode
~~~~~~~~~~~~~~~~~~~~~~
Set non-graphical mode. The default is ``False``.

.. GENERATED FROM PYTHON SOURCE LINES 26-29

.. code-block:: default


    non_graphical = os.getenv("PYAEDT_NON_GRAPHICAL", "False").lower() in ("true", "1", "t")








.. GENERATED FROM PYTHON SOURCE LINES 30-33

Launch AEDT
~~~~~~~~~~~
Launch AEDT 2022 R2 in graphical mode.

.. GENERATED FROM PYTHON SOURCE LINES 33-36

.. code-block:: default


    d = Desktop("2022.2", non_graphical=non_graphical, new_desktop_session=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Logger Started
    pyaedt info: Launching PyAEDT outside AEDT with CPython and PythonNET.
    pyaedt info: AEDT installation Path C:\Program Files\AnsysEM\v222\Win64.
    pyaedt info: Launching AEDT with module PythonNET.
    pyaedt info: Ansoft.ElectronicsDesktop.2022.2 Started with process ID 7752.
    pyaedt info: Logger file D:\Temp\pyaedt20220722_091734.log in use.
    pyaedt info: pyaedt v0.5.9
    pyaedt info: Python version 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)]




.. GENERATED FROM PYTHON SOURCE LINES 37-40

Launch HFSS
~~~~~~~~~~~
Launch HFSS 2022 R2 in graphical mode.

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default


    hfss = Hfss(solution_type="Modal")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Project Project49 has been created.
    pyaedt info: No design is present. Inserting a new design.
    pyaedt info: Added design 'HFSS_A2Q' of type HFSS.
    pyaedt info: Aedt Objects initialized
    pyaedt info: Variable Manager initialized
    pyaedt info: Design Loaded
    pyaedt info: Successfully loaded project materials !
    pyaedt info: Materials Loaded




.. GENERATED FROM PYTHON SOURCE LINES 44-47

Define dipole length variable
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Define a dipole length variable.

.. GENERATED FROM PYTHON SOURCE LINES 47-50

.. code-block:: default


    hfss["l_dipole"] = "13.5cm"








.. GENERATED FROM PYTHON SOURCE LINES 51-56

Get 3D component from system library
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get a 3D component from the ``syslib`` directory. For this example to run
correctly, you must get all geometry parameters of the 3D component or, in
case of an encrypted 3D component, create a dictionary of the parameters.

.. GENERATED FROM PYTHON SOURCE LINES 56-62

.. code-block:: default


    compfile = hfss.components3d["Dipole_Antenna_DM"]
    geometryparams = hfss.get_components3d_vars("Dipole_Antenna_DM")
    geometryparams["dipole_length"] = "l_dipole"
    hfss.modeler.insert_3d_component(compfile, geometryparams)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <pyaedt.modeler.Object3d.UserDefinedComponent object at 0x000001828F0C8550>



.. GENERATED FROM PYTHON SOURCE LINES 63-66

Create boundaries
~~~~~~~~~~~~~~~~~
Create boundaries. A region with openings is needed to run the analysis.

.. GENERATED FROM PYTHON SOURCE LINES 66-69

.. code-block:: default


    hfss.create_open_region(Frequency="1GHz")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Open Region correctly created.

    True



.. GENERATED FROM PYTHON SOURCE LINES 70-73

Plot model
~~~~~~~~~~
Plot the model.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

.. code-block:: default


    my_plot = hfss.plot(show=False, plot_air_objects=False)
    my_plot.show_axes = False
    my_plot.show_grid = False
    my_plot.isometric_view = False
    my_plot.plot(
        os.path.join(hfss.working_directory, "Image.jpg"),
    )




.. image-sg:: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_001.png
   :alt: HFSS Dipole
   :srcset: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 83-86

Create setup
~~~~~~~~~~~~
Create a setup with a sweep to run the simulation.

.. GENERATED FROM PYTHON SOURCE LINES 86-103

.. code-block:: default


    setup = hfss.create_setup("MySetup")
    setup.props["Frequency"] = "1GHz"
    setup.props["MaximumPasses"] = 1
    hfss.create_linear_count_sweep(
        setupname=setup.name,
        unit="GHz",
        freqstart=0.5,
        freqstop=1.5,
        num_of_freq_points=251,
        sweepname="sweep1",
        sweep_type="Interpolating",
        interpolation_tol=3,
        interpolation_max_solutions=255,
        save_fields=False,
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Linear count sweep sweep1 has been correctly created.

    <pyaedt.modules.SetupTemplates.SweepHFSS object at 0x0000018282A358B0>



.. GENERATED FROM PYTHON SOURCE LINES 104-107

Save and run simulation
~~~~~~~~~~~~~~~~~~~~~~~
Save and run the simulation.

.. GENERATED FROM PYTHON SOURCE LINES 107-111

.. code-block:: default


    hfss.save_project(os.path.join(temp_folder, "MyDipole.aedt"))
    hfss.analyze_setup("MySetup")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Project MyDipole Saved correctly
    pyaedt info: Solving design setup MySetup
    pyaedt info: Design setup MySetup solved correctly

    True



.. GENERATED FROM PYTHON SOURCE LINES 112-115

Generate scattering plot and far fields plot
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Generate a scattering plot and a far fields plot.

.. GENERATED FROM PYTHON SOURCE LINES 115-130

.. code-block:: default


    hfss.create_scattering("MyScattering")
    variations = hfss.available_variations.nominal_w_values_dict
    variations["Freq"] = ["1GHz"]
    variations["Theta"] = ["All"]
    variations["Phi"] = ["All"]
    hfss.post.create_report(
        "db(GainTotal)",
        hfss.nominal_adaptive,
        variations,
        primary_sweep_variable="Theta",
        context="3D",
        report_category="Far Fields",
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <pyaedt.modules.report_templates.FarField object at 0x000001828ECA3970>



.. GENERATED FROM PYTHON SOURCE LINES 131-135

Generate plot using report objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Generate a plot using the ``report_by_category`` method.
This plot creation method gives you more freedom. 

.. GENERATED FROM PYTHON SOURCE LINES 135-141

.. code-block:: default


    new_report = hfss.post.reports_by_category.far_field("db(RealizedGainTotal)", hfss.nominal_adaptive, "3D")
    new_report.variations = variations
    new_report.primary_sweep = "Theta"
    new_report.create("Realized2D")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 142-146

Generate multiple plots
~~~~~~~~~~~~~~~~~~~~~~~
Generate multiple plots using the object ``new_report``. This code generates
2D and 3D polar plots.

.. GENERATED FROM PYTHON SOURCE LINES 146-151

.. code-block:: default


    new_report.report_type = "3D Polar Plot"
    new_report.secondary_sweep = "Phi"
    new_report.create("Realized3D")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 152-156

Get solution data
~~~~~~~~~~~~~~~~~
Get solution data using the object ``new_report` and postprocess or plot the
data outside of AEDT.

.. GENERATED FROM PYTHON SOURCE LINES 156-160

.. code-block:: default


    solution_data = new_report.get_solution_data()
    solution_data.plot()




.. image-sg:: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_002.png
   :alt: Simulation Results Plot
   :srcset: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Solution Data Correctly Loaded.

    <Figure size 2000x1000 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 161-167

Generate far field plot
~~~~~~~~~~~~~~~~~~~~~~~
Generate a far field plot by creating a postprocessing variable and assigning
it to a new coordinate system. You can use the ``post`` prefix to create a
postprocessing variable directly from a setter, or you can use the ``set_variable``
method with an arbitrary name.

.. GENERATED FROM PYTHON SOURCE LINES 167-173

.. code-block:: default


    hfss["post_x"] = 2
    hfss.variable_manager.set_variable("y_post", 1, postprocessing=True)
    hfss.modeler.create_coordinate_system(["post_x", "y_post", 0], name="CS_Post")
    hfss.insert_infinite_sphere(custom_coordinate_system="CS_Post", name="Sphere_Custom")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: aedt file load time 0.01568293571472168

    <pyaedt.modules.Boundary.FarFieldSetup object at 0x0000018282978E50>



.. GENERATED FROM PYTHON SOURCE LINES 174-178

Get solution data
~~~~~~~~~~~~~~~~~
Get solution data. You can use this code to generate the same plot outside
of AEDT.

.. GENERATED FROM PYTHON SOURCE LINES 178-201

.. code-block:: default


    new_report = hfss.post.reports_by_category.far_field("GainTotal", hfss.nominal_adaptive, "3D")
    new_report.primary_sweep = "Theta"
    new_report.far_field_sphere = "3D"
    solutions = new_report.get_solution_data()
    # solutions = hfss.post.get_solution_data(
    #     "GainTotal",
    #     hfss.nominal_adaptive,
    #     variations,
    #     primary_sweep_variable="Theta",
    #     context="3D",
    #     report_category="Far Fields",
    # )
    #
    # solutions_custom = hfss.post.get_solution_data(
    #     "GainTotal",
    #     hfss.nominal_adaptive,
    #     variations,
    #     primary_sweep_variable="Theta",
    #     context="Sphere_Custom",
    #     report_category="Far Fields",
    # )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Solution Data Correctly Loaded.




.. GENERATED FROM PYTHON SOURCE LINES 202-205

Generate 3D plot using Matplotlib
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Generate a 3D plot using Matplotlib.

.. GENERATED FROM PYTHON SOURCE LINES 205-208

.. code-block:: default


    solutions.plot_3d()




.. image-sg:: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_003.png
   :alt: Simulation Results Plot
   :srcset: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Figure size 2000x1000 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 209-212

Generate 3D far fields plot using Matplotlib
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Generate a far field plot using Matplotlib.

.. GENERATED FROM PYTHON SOURCE LINES 212-217

.. code-block:: default


    new_report.far_field_sphere = "Sphere_Custom"
    solutions_custom = new_report.get_solution_data()
    solutions_custom.plot_3d()




.. image-sg:: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_004.png
   :alt: Simulation Results Plot
   :srcset: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Solution Data Correctly Loaded.

    <Figure size 2000x1000 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 218-222

Generate 2D plot using Matplotlib
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Generate a 2D plot using Matplotlib where you decide whether it is a polar
plot or rectangular plot.

.. GENERATED FROM PYTHON SOURCE LINES 222-225

.. code-block:: default


    solutions.plot(math_formula="db20", is_polar=True)




.. image-sg:: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_005.png
   :alt: Simulation Results Plot
   :srcset: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Figure size 2000x1000 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 226-231

Close AEDT
~~~~~~~~~~
After the simulaton completes, you can close AEDT or release it using the
:func:`pyaedt.Desktop.release_desktop` method.
All methods provide for saving the project before closing.

.. GENERATED FROM PYTHON SOURCE LINES 231-234

.. code-block:: default


    if os.name != "posix":
        d.release_desktop()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  57.233 seconds)


.. _sphx_glr_download_examples_02-HFSS_HFSS_Dipole.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: HFSS_Dipole.py <HFSS_Dipole.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: HFSS_Dipole.ipynb <HFSS_Dipole.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
