
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\02-HFSS\Advanced_Far_Field.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_02-HFSS_Advanced_Far_Field.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-HFSS_Advanced_Far_Field.py:


HFSS: advanced far field postprocessing
---------------------------------------
This example shows how to use advanced postprocessing functions to create plots
using Matplotlib without opening the HFSS user interface.
This examples runs only on Windows using CPython.

.. GENERATED FROM PYTHON SOURCE LINES 9-12

Import packages
~~~~~~~~~~~~~~~
Set the local path to the path for PyAEDT.

.. GENERATED FROM PYTHON SOURCE LINES 12-32

.. code-block:: default


    import os
    import pathlib

    local_path = os.path.abspath("")
    module_path = pathlib.Path(local_path)
    aedt_lib_path = module_path.parent.parent.parent
    from pyaedt import examples

    project_name = examples.download_antenna_array()


    import time


    from pyaedt import Desktop
    from pyaedt import Hfss
    from pyaedt.generic.general_methods import remove_project_lock









.. GENERATED FROM PYTHON SOURCE LINES 33-35

Set non-graphical mode
Set non-graphical mode. The default is ``False``.

.. GENERATED FROM PYTHON SOURCE LINES 35-39

.. code-block:: default


    non_graphical = os.getenv("PYAEDT_NON_GRAPHICAL", "False").lower() in ("true", "1", "t")









.. GENERATED FROM PYTHON SOURCE LINES 40-43

Import all modules for postprocessing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Import all modules for postprocessing.

.. GENERATED FROM PYTHON SOURCE LINES 43-47

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 48-51

Launch AEDT
~~~~~~~~~~~
Launch AEDT 2022 R2 in non-graphical mode.

.. GENERATED FROM PYTHON SOURCE LINES 51-56

.. code-block:: default


    desktopVersion = "2022.2"
    NewThread = False
    desktop = Desktop(desktopVersion, non_graphical=non_graphical, new_desktop_session=NewThread)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Logger Started
    pyaedt info: Launching PyAEDT outside AEDT with CPython and PythonNET.
    pyaedt info: AEDT installation Path C:\Program Files\AnsysEM\v222\Win64.
    pyaedt info: Launching AEDT with module PythonNET.
    pyaedt info: Ansoft.ElectronicsDesktop.2022.2 Started with process ID 4100.
    pyaedt info: Logger file D:\Temp\pyaedt20220722_091734.log in use.
    pyaedt info: pyaedt v0.5.9
    pyaedt info: Python version 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)]




.. GENERATED FROM PYTHON SOURCE LINES 57-60

Open HFSS project
~~~~~~~~~~~~~~~~~
Open the HFSS project.

.. GENERATED FROM PYTHON SOURCE LINES 60-66

.. code-block:: default


    remove_project_lock(project_name)

    hfss = Hfss(project_name, "4X4_MultiCell_CA-Array")






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Project FiniteArray_Radome_77GHz_3D_CADDM has been opened.
    pyaedt info: Aedt Objects initialized
    pyaedt info: Variable Manager initialized
    pyaedt info: Design Loaded
    pyaedt info: Successfully loaded project materials !
    pyaedt info: Materials Loaded
    pyaedt info: aedt file load time 0.18758106231689453




.. GENERATED FROM PYTHON SOURCE LINES 67-71

Solve HFSS project
~~~~~~~~~~~~~~~~~~~
Solves the HFSS project.
The solution time is computed.

.. GENERATED FROM PYTHON SOURCE LINES 71-78

.. code-block:: default


    start = time.time()
    hfss.analyze_setup("Setup1")
    hfss.save_project()
    end = time.time() - start
    print("Solution Time", end)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Solving design setup Setup1
    pyaedt info: Design setup Setup1 solved correctly
    pyaedt info: Project FiniteArray_Radome_77GHz_3D_CADDM Saved correctly
    Solution Time 21.48723530769348




.. GENERATED FROM PYTHON SOURCE LINES 79-82

Get efields data from solution
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Gets efields data from the solution.

.. GENERATED FROM PYTHON SOURCE LINES 82-88

.. code-block:: default


    start = time.time()
    ff_data = hfss.post.get_efields_data(ff_setup="3D")
    end = time.time() - start
    print("Postprocessing Time", end)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    pyaedt info: Solution Data Correctly Loaded.
    Postprocessing Time 290.253479719162




.. GENERATED FROM PYTHON SOURCE LINES 89-93

Calculate far field values
~~~~~~~~~~~~~~~~~~~~~~~~~~
Use Matplotlib to read the solution generated in ``ff_data``and process
the field based on Phi and Theta and generate a plot.

.. GENERATED FROM PYTHON SOURCE LINES 93-177

.. code-block:: default


    def ff_calc(x=0, y=0, qty="rETotal", dB=True):
        array_size = [4, 4]
        loc_offset = 2  # if array index is not starting at [1,1]
        xphase = float(y)
        yphase = float(x)
        array_shape = (array_size[0], array_size[1])
        weight = np.zeros(array_shape, dtype=complex)
        mag = np.ones(array_shape, dtype="object")
        port_names_arranged = np.chararray(array_shape)
        all_ports = ff_data.keys()
        w_dict = {}
        # calculate weights based off of progressive phase shift
        for m in range(array_shape[0]):
            for n in range(array_shape[1]):
                mag_val = mag[m][n]
                ang = np.radians(xphase * m) + np.radians(yphase * n)
                weight[m][n] = np.sqrt(mag_val) * np.exp(1j * ang)
                current_index_str = "[" + str(m + 1 + loc_offset) + "," + str(n + 1 + loc_offset) + "]"
                port_name = [y for y in all_ports if current_index_str in y]
                w_dict[port_name[0]] = weight[m][n]

        length_of_ff_data = len(ff_data[port_name[0]][2])

        array_shape = (len(w_dict), length_of_ff_data)
        rEtheta_fields = np.zeros(array_shape, dtype=complex)
        rEphi_fields = np.zeros(array_shape, dtype=complex)
        w = np.zeros((1, array_shape[0]), dtype=complex)
        # create port mapping
        for n, port in enumerate(ff_data.keys()):
            re_theta = ff_data[port][2]
            re_phi = ff_data[port][3]
            re_theta = re_theta * w_dict[port]

            w[0][n] = w_dict[port]
            re_phi = re_phi * w_dict[port]

            rEtheta_fields[n] = re_theta
            rEphi_fields[n] = re_phi

            theta_range = ff_data[port][0]
            phi_range = ff_data[port][1]
            theta = [int(np.min(theta_range)), int(np.max(theta_range)), np.size(theta_range)]
            phi = [int(np.min(phi_range)), int(np.max(phi_range)), np.size(phi_range)]
            Ntheta = len(theta_range)
            Nphi = len(phi_range)

        rEtheta_fields = np.dot(w, rEtheta_fields)
        rEtheta_fields = np.reshape(rEtheta_fields, (Ntheta, Nphi))

        rEphi_fields = np.dot(w, rEphi_fields)
        rEphi_fields = np.reshape(rEphi_fields, (Ntheta, Nphi))

        all_qtys = {}
        all_qtys["rEPhi"] = rEphi_fields
        all_qtys["rETheta"] = rEtheta_fields
        all_qtys["rETotal"] = np.sqrt(np.power(np.abs(rEphi_fields), 2) + np.power(np.abs(rEtheta_fields), 2))

        pin = np.sum(w)
        print(str(pin))
        real_gain = 2 * np.pi * np.abs(np.power(all_qtys["rETotal"], 2)) / pin / 377
        all_qtys["RealizedGain"] = real_gain

        if dB:
            if "Gain" in qty:
                qty_to_plot = 10 * np.log10(np.abs(all_qtys[qty]))
            else:
                qty_to_plot = 20 * np.log10(np.abs(all_qtys[qty]))
            qty_str = qty + " (dB)"
        else:
            qty_to_plot = np.abs(all_qtys[qty])
            qty_str = qty + " (mag)"

        plt.figure(figsize=(25, 15))
        plt.title(qty_str)
        plt.xlabel("Theta (degree)")
        plt.ylabel("Phi (degree)")

        plt.imshow(qty_to_plot, cmap="jet")
        plt.colorbar()

        np.max(qty_to_plot)









.. GENERATED FROM PYTHON SOURCE LINES 178-181

Create plot and interact with it
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create the plot and interact with it.

.. GENERATED FROM PYTHON SOURCE LINES 181-192

.. code-block:: default


    ff_calc()

    # interact(ff_calc, x=widgets.FloatSlider(value=0, min=-180, max=180, step=1),
    #          y=widgets.FloatSlider(value=0, min=-180, max=180, step=1))


    vals = hfss.post.get_far_field_data(
        setup_sweep_name=hfss.nominal_sweep, expression="RealizedGainTotal", domain="Elevation"
    )




.. image-sg:: /examples/02-HFSS/images/sphx_glr_Advanced_Far_Field_001.png
   :alt: rETotal (dB)
   :srcset: /examples/02-HFSS/images/sphx_glr_Advanced_Far_Field_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (16+0j)
    pyaedt info: Solution Data Correctly Loaded.




.. GENERATED FROM PYTHON SOURCE LINES 193-196

Generate polar plot
~~~~~~~~~~~~~~~~~~~
Generate a polar plot.

.. GENERATED FROM PYTHON SOURCE LINES 196-199

.. code-block:: default


    vals.plot(math_formula="db20", is_polar=True)




.. image-sg:: /examples/02-HFSS/images/sphx_glr_Advanced_Far_Field_002.png
   :alt: Simulation Results Plot
   :srcset: /examples/02-HFSS/images/sphx_glr_Advanced_Far_Field_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Figure size 2000x1000 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 200-203

Generate scalar plot
~~~~~~~~~~~~~~~~~~~~
Generate a scalar plot.

.. GENERATED FROM PYTHON SOURCE LINES 203-207

.. code-block:: default


    vals.plot(math_formula="db20", is_polar=False)





.. image-sg:: /examples/02-HFSS/images/sphx_glr_Advanced_Far_Field_003.png
   :alt: Simulation Results Plot
   :srcset: /examples/02-HFSS/images/sphx_glr_Advanced_Far_Field_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Figure size 2000x1000 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 208-211

Generate plot using Phi as primary sweep
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Generate the plot using Phi as the primary sweep.

.. GENERATED FROM PYTHON SOURCE LINES 211-219

.. code-block:: default


    vals3d = hfss.post.get_far_field_data(
        setup_sweep_name=hfss.nominal_sweep, expression="RealizedGainTotal", domain="Infinite Sphere1"
    )

    vals3d.plot_3d()





.. image-sg:: /examples/02-HFSS/images/sphx_glr_Advanced_Far_Field_004.png
   :alt: Advanced Far Field
   :srcset: /examples/02-HFSS/images/sphx_glr_Advanced_Far_Field_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Solution Data Correctly Loaded.
    pyaedt error: Method plot_3d_chart Failed:  Value Error. Please Check again
    Method plot_3d_chart Failed:  Value Error. Please Check again
    pyaedt error: operands could not be broadcast together with shapes (121,2) (121,61) 
    operands could not be broadcast together with shapes (121,2) (121,61) 
    pyaedt error: Arguments Provided: 
    Arguments Provided: 
    pyaedt error:     plot_data = [[0.0, 3.0, 6.0, 9.0, 12.0, 14.999999999999998, 18.0, 21.0, 24.0, 27.0, 29.999999999999996, 33.0, 36.0, 39.0, 42.0, 45.0, 48.0, 51.0, 54.0, 57.0, 59.99999999999999, 63.0, 66.0, 69.0, 72.0, 75.0, 78.0, 81.0, 84.0, 87.0, 90.0, 93.0, 96.
        plot_data = [[0.0, 3.0, 6.0, 9.0, 12.0, 14.999999999999998, 18.0, 21.0, 24.0, 27.0, 29.999999999999996, 33.0, 36.0, 39.0, 42.0, 45.0, 48.0, 51.0, 54.0, 57.0, 59.99999999999999, 63.0, 66.0, 69.0, 72.0, 75.0, 78.0, 81.0, 84.0, 87.0, 90.0, 93.0, 96.
    pyaedt error: 0, 99.0, 102.0, 105.0, 108.0, 111.0, 114.0, 117.0, 119.99999999999999, 123.0, 126.0, 129.0, 132.0, 135.0, 138.0, 141.0, 144.0, 147.0, 150.0, 153.0, 156.0, 159.0, 162.0, 165.0, 168.0, 171.0, 174.0, 177.0, 180.0], [-3.141592653589793, -3.08923277602996
    0, 99.0, 102.0, 105.0, 108.0, 111.0, 114.0, 117.0, 119.99999999999999, 123.0, 126.0, 129.0, 132.0, 135.0, 138.0, 141.0, 144.0, 147.0, 150.0, 153.0, 156.0, 159.0, 162.0, 165.0, 168.0, 171.0, 174.0, 177.0, 180.0], [-3.141592653589793, -3.08923277602996
    pyaedt error: 34, -3.036872898470133, -2.9845130209103035, -2.9321531433504737, -2.8797932657906435, -2.827433388230814, -2.775073510670984, -2.722713633111154, -2.670353755551324, -2.6179938779914944, -2.5656340004316647, -2.5132741228718345, -2.4609142453120043,
    34, -3.036872898470133, -2.9845130209103035, -2.9321531433504737, -2.8797932657906435, -2.827433388230814, -2.775073510670984, -2.722713633111154, -2.670353755551324, -2.6179938779914944, -2.5656340004316647, -2.5132741228718345, -2.4609142453120043,
    pyaedt error:  -2.4085543677521746, -2.356194490192345, -2.303834612632515, -2.251474735072685, -2.199114857512855, -2.1467549799530254, -2.0943951023931953, -2.0420352248333655, -1.9896753472735356, -1.9373154697137058, -1.8849555921538759, -1.8325957145940461, -
     -2.4085543677521746, -2.356194490192345, -2.303834612632515, -2.251474735072685, -2.199114857512855, -2.1467549799530254, -2.0943951023931953, -2.0420352248333655, -1.9896753472735356, -1.9373154697137058, -1.8849555921538759, -1.8325957145940461, -
    pyaedt error: 1.780235837034216, -1.7278759594743864, -1.6755160819145563, -1.6231562043547263, -1.5707963267948966, -1.5184364492350666, -1.4660765716752369, -1.413716694115407, -1.361356816555577, -1.3089969389957472, -1.2566370614359172, -1.2042771838760873, -1
    1.780235837034216, -1.7278759594743864, -1.6755160819145563, -1.6231562043547263, -1.5707963267948966, -1.5184364492350666, -1.4660765716752369, -1.413716694115407, -1.361356816555577, -1.3089969389957472, -1.2566370614359172, -1.2042771838760873, -1
    pyaedt error: .1519173063162575, -1.0995574287564276, -1.0471975511965976, -0.9948376736367678, -0.9424777960769379, -0.890117918517108, -0.8377580409572781, -0.7853981633974483, -0.7330382858376184, -0.6806784082777885, -0.6283185307179586, -0.5759586531581288, -
    .1519173063162575, -1.0995574287564276, -1.0471975511965976, -0.9948376736367678, -0.9424777960769379, -0.890117918517108, -0.8377580409572781, -0.7853981633974483, -0.7330382858376184, -0.6806784082777885, -0.6283185307179586, -0.5759586531581288, -
    pyaedt error: 0.5235987755982988, -0.47123889803846897, -0.41887902047863906, -0.3665191429188092, -0.3141592653589793, -0.2617993877991494, -0.20943951023931953, -0.15707963267948966, -0.10471975511965977, -0.05235987755982988, 0.0, 0.05235987755982988, 0.1047197
    0.5235987755982988, -0.47123889803846897, -0.41887902047863906, -0.3665191429188092, -0.3141592653589793, -0.2617993877991494, -0.20943951023931953, -0.15707963267948966, -0.10471975511965977, -0.05235987755982988, 0.0, 0.05235987755982988, 0.1047197
    pyaedt error: 5511965977, 0.15707963267948966, 0.20943951023931953, 0.2617993877991494, 0.3141592653589793, 0.3665191429188092, 0.41887902047863906, 0.47123889803846897, 0.5235987755982988, 0.5759586531581288, 0.6283185307179586, 0.6806784082777885, 0.733038285837
    5511965977, 0.15707963267948966, 0.20943951023931953, 0.2617993877991494, 0.3141592653589793, 0.3665191429188092, 0.41887902047863906, 0.47123889803846897, 0.5235987755982988, 0.5759586531581288, 0.6283185307179586, 0.6806784082777885, 0.733038285837
    pyaedt error: 6184, 0.7853981633974483, 0.8377580409572781, 0.890117918517108, 0.9424777960769379, 0.9948376736367678, 1.0471975511965976, 1.0995574287564276, 1.1519173063162575, 1.2042771838760873, 1.2566370614359172, 1.3089969389957472, 1.361356816555577, 1.4137
    6184, 0.7853981633974483, 0.8377580409572781, 0.890117918517108, 0.9424777960769379, 0.9948376736367678, 1.0471975511965976, 1.0995574287564276, 1.1519173063162575, 1.2042771838760873, 1.2566370614359172, 1.3089969389957472, 1.361356816555577, 1.4137
    pyaedt error: 16694115407, 1.4660765716752369, 1.5184364492350666, 1.5707963267948966, 1.6231562043547263, 1.6755160819145563, 1.7278759594743864, 1.780235837034216, 1.8325957145940461, 1.8849555921538759, 1.9373154697137058, 1.9896753472735356, 2.0420352248333655
    16694115407, 1.4660765716752369, 1.5184364492350666, 1.5707963267948966, 1.6231562043547263, 1.6755160819145563, 1.7278759594743864, 1.780235837034216, 1.8325957145940461, 1.8849555921538759, 1.9373154697137058, 1.9896753472735356, 2.0420352248333655
    pyaedt error: , 2.0943951023931953, 2.1467549799530254, 2.199114857512855, 2.251474735072685, 2.303834612632515, 2.356194490192345, 2.4085543677521746, 2.4609142453120043, 2.5132741228718345, 2.5656340004316647, 2.6179938779914944, 2.670353755551324, 2.72271363311
    , 2.0943951023931953, 2.1467549799530254, 2.199114857512855, 2.251474735072685, 2.303834612632515, 2.356194490192345, 2.4085543677521746, 2.4609142453120043, 2.5132741228718345, 2.5656340004316647, 2.6179938779914944, 2.670353755551324, 2.72271363311
    pyaedt error: 1154, 2.775073510670984, 2.827433388230814, 2.8797932657906435, 2.9321531433504737, 2.9845130209103035, 3.036872898470133, 3.0892327760299634, 3.141592653589793], [[1.5172350166054933, 1.5433176414932714], [1.5172350166054922, 1.5433176414932717], [1
    1154, 2.775073510670984, 2.827433388230814, 2.8797932657906435, 2.9321531433504737, 2.9845130209103035, 3.036872898470133, 3.0892327760299634, 3.141592653589793], [[1.5172350166054933, 1.5433176414932714], [1.5172350166054922, 1.5433176414932717], [1
    pyaedt error: .5172350166054913, 1.5433176414932717], [1.5172350166054915, 1.543317641493272], [1.5172350166054915, 1.5433176414932703], [1.517235016605492, 1.5433176414932703], [1.517235016605492, 1.5433176414932719], [1.5172350166054922, 1.543317641493272], [1.5
    .5172350166054913, 1.5433176414932717], [1.5172350166054915, 1.543317641493272], [1.5172350166054915, 1.5433176414932703], [1.517235016605492, 1.5433176414932703], [1.517235016605492, 1.5433176414932719], [1.5172350166054922, 1.543317641493272], [1.5
    pyaedt error: 17235016605492, 1.5433176414932723], [1.5172350166054922, 1.5433176414932726], [1.517235016605492, 1.5433176414932726], [1.517235016605492, 1.5433176414932717], [1.517235016605492, 1.5433176414932717], [1.517235016605492, 1.543317641493271], [1.51723
    17235016605492, 1.5433176414932723], [1.5172350166054922, 1.5433176414932726], [1.517235016605492, 1.5433176414932726], [1.517235016605492, 1.5433176414932717], [1.517235016605492, 1.5433176414932717], [1.517235016605492, 1.543317641493271], [1.51723
    pyaedt error: 50166054915, 1.5433176414932717], [1.5172350166054906, 1.5433176414932714], [1.5172350166054915, 1.5433176414932717], [1.5172350166054915, 1.5433176414932717], [1.517235016605492, 1.5433176414932726], [1.517235016605492, 1.543317641493272], [1.517235
    50166054915, 1.5433176414932717], [1.5172350166054906, 1.5433176414932714], [1.5172350166054915, 1.5433176414932717], [1.5172350166054915, 1.5433176414932717], [1.517235016605492, 1.5433176414932726], [1.517235016605492, 1.543317641493272], [1.517235
    pyaedt error: 0166054922, 1.5433176414932712], [1.5172350166054922, 1.5433176414932717], [1.5172350166054922, 1.5433176414932714], [1.5172350166054915, 1.5433176414932717], [1.5172350166054922, 1.5433176414932717], [1.517235016605492, 1.5433176414932703], [1.51723
    0166054922, 1.5433176414932712], [1.5172350166054922, 1.5433176414932717], [1.5172350166054922, 1.5433176414932714], [1.5172350166054915, 1.5433176414932717], [1.5172350166054922, 1.5433176414932717], [1.517235016605492, 1.5433176414932703], [1.51723
    pyaedt error: 50166054922, 1.543317641493271], [1.517235016605492, 1.5433176414932717], [1.5172350166054929, 1.5433176414932714], [1.5172350166054926, 1.5433176414932714], [1.5172350166054922, 1.5433176414932712], [1.5172350166054924, 1.543317641493272], [1.517235
    50166054922, 1.543317641493271], [1.517235016605492, 1.5433176414932717], [1.5172350166054929, 1.5433176414932714], [1.5172350166054926, 1.5433176414932714], [1.5172350166054922, 1.5433176414932712], [1.5172350166054924, 1.543317641493272], [1.517235
    pyaedt error: 0166054922, 1.5433176414932723], [1.517235016605492, 1.5433176414932714], [1.5172350166054924, 1.5433176414932712], [1.5172350166054915, 1.5433176414932708], [1.5172350166054922, 1.5433176414932703], [1.5172350166054924, 1.5433176414932703], [1.51723
    0166054922, 1.5433176414932723], [1.517235016605492, 1.5433176414932714], [1.5172350166054924, 1.5433176414932712], [1.5172350166054915, 1.5433176414932708], [1.5172350166054922, 1.5433176414932703], [1.5172350166054924, 1.5433176414932703], [1.51723
    pyaedt error: 50166054922, 1.5433176414932723], [1.5172350166054909, 1.543317641493272], [1.5172350166054909, 1.5433176414932712], [1.5172350166054915, 1.5433176414932712], [1.5172350166054915, 1.5433176414932717], [1.5172350166054909, 1.5433176414932723], [1.5172
    50166054922, 1.5433176414932723], [1.5172350166054909, 1.543317641493272], [1.5172350166054909, 1.5433176414932712], [1.5172350166054915, 1.5433176414932712], [1.5172350166054915, 1.5433176414932717], [1.5172350166054909, 1.5433176414932723], [1.5172
    pyaedt error: 350166054922, 1.543317641493272], [1.5172350166054922, 1.543317641493272], [1.5172350166054924, 1.543317641493272], [1.5172350166054909, 1.543317641493272], [1.5172350166054909, 1.5433176414932714], [1.517235016605492, 1.5433176414932712], [1.5172350
    350166054922, 1.543317641493272], [1.5172350166054922, 1.543317641493272], [1.5172350166054924, 1.543317641493272], [1.5172350166054909, 1.543317641493272], [1.5172350166054909, 1.5433176414932714], [1.517235016605492, 1.5433176414932712], [1.5172350
    pyaedt error: 166054915, 1.5433176414932714], [1.5172350166054924, 1.5433176414932712], [1.5172350166054924, 1.5433176414932712], [1.5172350166054924, 1.5433176414932714], [1.5172350166054915, 1.5433176414932714], [1.517235016605492, 1.543317641493272], [1.5172350
    166054915, 1.5433176414932714], [1.5172350166054924, 1.5433176414932712], [1.5172350166054924, 1.5433176414932712], [1.5172350166054924, 1.5433176414932714], [1.5172350166054915, 1.5433176414932714], [1.517235016605492, 1.543317641493272], [1.5172350
    pyaedt error: 166054915, 1.5433176414932712], [1.5172350166054915, 1.5433176414932717], [1.5172350166054924, 1.5433176414932712], [1.5172350166054922, 1.5433176414932714], [1.517235016605492, 1.5433176414932714], [1.5172350166054915, 1.5433176414932714], [1.517235
    166054915, 1.5433176414932712], [1.5172350166054915, 1.5433176414932717], [1.5172350166054924, 1.5433176414932712], [1.5172350166054922, 1.5433176414932714], [1.517235016605492, 1.5433176414932714], [1.5172350166054915, 1.5433176414932714], [1.517235
    pyaedt error: 0166054913, 1.5433176414932726], [1.517235016605492, 1.5433176414932714], [1.517235016605492, 1.5433176414932712], [1.517235016605492, 1.5433176414932712], [1.5172350166054915, 1.5433176414932714], [1.5172350166054915, 1.5433176414932717], [1.5172350
    0166054913, 1.5433176414932726], [1.517235016605492, 1.5433176414932714], [1.517235016605492, 1.5433176414932712], [1.517235016605492, 1.5433176414932712], [1.5172350166054915, 1.5433176414932714], [1.5172350166054915, 1.5433176414932717], [1.5172350
    pyaedt error: 16605492, 1.5433176414932712], [1.5172350166054922, 1.5433176414932723], [1.5172350166054922, 1.5433176414932723], [1.517235016605492, 1.5433176414932712], [1.5172350166054922, 1.5433176414932712], [1.5172350166054922, 1.5433176414932714], [1.5172350
    16605492, 1.5433176414932712], [1.5172350166054922, 1.5433176414932723], [1.5172350166054922, 1.5433176414932723], [1.517235016605492, 1.5433176414932712], [1.5172350166054922, 1.5433176414932712], [1.5172350166054922, 1.5433176414932714], [1.5172350
    pyaedt error: 16605492, 1.5433176414932712], [1.5172350166054915, 1.543317641493272], [1.5172350166054924, 1.5433176414932712], [1.5172350166054922, 1.5433176414932712], [1.5172350166054922, 1.5433176414932723], [1.517235016605492, 1.5433176414932717], [1.51723501
    16605492, 1.5433176414932712], [1.5172350166054915, 1.543317641493272], [1.5172350166054924, 1.5433176414932712], [1.5172350166054922, 1.5433176414932712], [1.5172350166054922, 1.5433176414932723], [1.517235016605492, 1.5433176414932717], [1.51723501
    pyaedt error: 6605493, 1.5433176414932717], [1.5172350166054922, 1.5433176414932714], [1.5172350166054924, 1.5433176414932717], [1.5172350166054922, 1.543317641493271], [1.5172350166054922, 1.5433176414932703], [1.5172350166054924, 1.5433176414932712], [1.51723501
    6605493, 1.5433176414932717], [1.5172350166054922, 1.5433176414932714], [1.5172350166054924, 1.5433176414932717], [1.5172350166054922, 1.543317641493271], [1.5172350166054922, 1.5433176414932703], [1.5172350166054924, 1.5433176414932712], [1.51723501
    pyaedt error: 66054922, 1.543317641493271], [1.5172350166054922, 1.5433176414932717], [1.5172350166054924, 1.5433176414932712], [1.5172350166054922, 1.5433176414932714], [1.5172350166054922, 1.5433176414932712], [1.5172350166054924, 1.5433176414932717], [1.5172350
    66054922, 1.543317641493271], [1.5172350166054922, 1.5433176414932717], [1.5172350166054924, 1.5433176414932712], [1.5172350166054922, 1.5433176414932714], [1.5172350166054922, 1.5433176414932712], [1.5172350166054924, 1.5433176414932717], [1.5172350
    pyaedt error: 166054913, 1.5433176414932717], [1.517235016605492, 1.5433176414932712], [1.517235016605492, 1.5433176414932712], [1.5172350166054913, 1.543317641493271], [1.517235016605492, 1.5433176414932717], [1.5172350166054915, 1.5433176414932712], [1.517235016
    166054913, 1.5433176414932717], [1.517235016605492, 1.5433176414932712], [1.517235016605492, 1.5433176414932712], [1.5172350166054913, 1.543317641493271], [1.517235016605492, 1.5433176414932717], [1.5172350166054915, 1.5433176414932712], [1.517235016
    pyaedt error: 6054913, 1.5433176414932717], [1.517235016605492, 1.5433176414932714], [1.5172350166054922, 1.5433176414932714], [1.5172350166054913, 1.5433176414932717], [1.5172350166054922, 1.5433176414932714], [1.5172350166054915, 1.5433176414932717], [1.51723501
    6054913, 1.5433176414932717], [1.517235016605492, 1.5433176414932714], [1.5172350166054922, 1.5433176414932714], [1.5172350166054913, 1.5433176414932717], [1.5172350166054922, 1.5433176414932714], [1.5172350166054915, 1.5433176414932717], [1.51723501
    pyaedt error: 6605492, 1.5433176414932723], [1.5172350166054922, 1.543317641493272], [1.5172350166054909, 1.5433176414932723], [1.5172350166054913, 1.5433176414932726], [1.5172350166054909, 1.5433176414932714], [1.5172350166054924, 1.5433176414932717], [1.51723501
    6605492, 1.5433176414932723], [1.5172350166054922, 1.543317641493272], [1.5172350166054909, 1.5433176414932723], [1.5172350166054913, 1.5433176414932726], [1.5172350166054909, 1.5433176414932714], [1.5172350166054924, 1.5433176414932717], [1.51723501
    pyaedt error: 66054906, 1.5433176414932714], [1.5172350166054915, 1.5433176414932712], [1.517235016605492, 1.5433176414932714], [1.5172350166054913, 1.5433176414932717], [1.5172350166054915, 1.5433176414932717], [1.5172350166054915, 1.5433176414932723], [1.5172350
    66054906, 1.5433176414932714], [1.5172350166054915, 1.5433176414932712], [1.517235016605492, 1.5433176414932714], [1.5172350166054913, 1.5433176414932717], [1.5172350166054915, 1.5433176414932717], [1.5172350166054915, 1.5433176414932723], [1.5172350
    pyaedt error: 166054913, 1.5433176414932712], [1.5172350166054915, 1.5433176414932717], [1.5172350166054909, 1.5433176414932717], [1.5172350166054913, 1.5433176414932728], [1.5172350166054933, 1.5433176414932714]]] 
    166054913, 1.5433176414932712], [1.5172350166054915, 1.5433176414932717], [1.5172350166054909, 1.5433176414932717], [1.5172350166054913, 1.5433176414932728], [1.5172350166054933, 1.5433176414932714]]] 
    pyaedt error:     size = (2000, 1000) 
        size = (2000, 1000) 
    pyaedt error:     xlabel = Theta 
        xlabel = Theta 
    pyaedt error:     ylabel = Phi 
        ylabel = Phi 
    pyaedt error:     title = Simulation Results Plot 
        title = Simulation Results Plot 
    pyaedt error:     snapshot_path = None 
        snapshot_path = None 
    pyaedt error: Error in :   File "C:\actions-runner\_work\PyAEDT\PyAEDT\pyaedt\generic\plot.py", line 400, in plot_3d_chart
    Error in :   File "C:\actions-runner\_work\PyAEDT\PyAEDT\pyaedt\generic\plot.py", line 400, in plot_3d_chart
    pyaedt error: Check Online documentation on: https://aedtdocs.pyansys.com/search.html?q=plot_3d_chart
    Check Online documentation on: https://aedtdocs.pyansys.com/search.html?q=plot_3d_chart

    False



.. GENERATED FROM PYTHON SOURCE LINES 220-223

Close HFSS project and AEDT
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Close the HFSS project and release AEDT.

.. GENERATED FROM PYTHON SOURCE LINES 223-227

.. code-block:: default


    # hfss.close_project()
    hfss.save_project()
    desktop.release_desktop()




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Project FiniteArray_Radome_77GHz_3D_CADDM Saved correctly

    True




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  31.707 seconds)


.. _sphx_glr_download_examples_02-HFSS_Advanced_Far_Field.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: Advanced_Far_Field.py <Advanced_Far_Field.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: Advanced_Far_Field.ipynb <Advanced_Far_Field.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
