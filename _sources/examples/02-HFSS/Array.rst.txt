
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\02-HFSS\Array.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_02-HFSS_Array.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-HFSS_Array.py:


HFSS: component antenna array
-----------------------------
This example shows how to use PyAEDT to create an example using a 3D component file. It sets up
the analysis, solves it, and uses postprocessing functions to create plots using Matplotlib and
PyVista without opening the HFSS user interface. This examples runs only on Windows using CPython.

.. GENERATED FROM PYTHON SOURCE LINES 9-12

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Perform required imports.

.. GENERATED FROM PYTHON SOURCE LINES 12-20

.. code-block:: default


    import os
    from pyaedt import Hfss
    from pyaedt import examples
    from pyaedt.generic.DataHandlers import json_to_dict
    from pyaedt.generic.general_methods import generate_unique_name
    import tempfile








.. GENERATED FROM PYTHON SOURCE LINES 21-24

Set non-graphical mode
~~~~~~~~~~~~~~~~~~~~~~
Set non-graphical mode. The default is ``False``.

.. GENERATED FROM PYTHON SOURCE LINES 24-28

.. code-block:: default


    non_graphical = os.getenv("PYAEDT_NON_GRAPHICAL", "False").lower() in ("true", "1", "t")
    example_path = examples.download_3dcomponent()








.. GENERATED FROM PYTHON SOURCE LINES 29-32

Launch HFSS and save project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Launch HFSS and save the project.

.. GENERATED FROM PYTHON SOURCE LINES 32-40

.. code-block:: default


    hfss = Hfss(specified_version="2022.2", designname="Array_Simple", non_graphical=non_graphical, new_desktop_session=True)
    tmpfold = tempfile.gettempdir()
    name = generate_unique_name("array_demo")
    hfss.save_project(os.path.join(tmpfold, name+".aedt"))

    print(os.path.join(tmpfold, name+".aedt"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Logger Started
    pyaedt info: Launching PyAEDT outside AEDT with CPython and PythonNET.
    pyaedt info: AEDT installation Path C:\Program Files\AnsysEM\v222\Win64.
    pyaedt info: Launching AEDT with module PythonNET.
    pyaedt info: Ansoft.ElectronicsDesktop.2022.2 Started with process ID 11128.
    pyaedt info: Logger file D:\Temp\pyaedt20220722_091734.log in use.
    pyaedt info: pyaedt v0.5.9
    pyaedt info: Python version 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)]
    pyaedt info: Project Project49 has been created.
    pyaedt info: Added design 'Array_Simple' of type HFSS.
    pyaedt info: Aedt Objects initialized
    pyaedt info: Variable Manager initialized
    pyaedt info: Design Loaded
    pyaedt info: Successfully loaded project materials !
    pyaedt info: Materials Loaded
    pyaedt info: Project array_demo_FTEY38 Saved correctly
    D:\Temp\array_demo_FTEY38.aedt




.. GENERATED FROM PYTHON SOURCE LINES 41-50

Read array definition from JSON file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Read the array definition from a JSON file. A JSON file
can contain all information needed to import and set up a
full array in HFSS.

If a 3D component is not available in the design, it is loaded
into the dictionary from the path that you specify. The following
code edits the dictionary to point to the location of the A3DCOMP file.

.. GENERATED FROM PYTHON SOURCE LINES 50-57

.. code-block:: default


    dict_in = json_to_dict(os.path.join(example_path, "array_simple.json"))
    dict_in["Circ_Patch_5GHz1"] = os.path.join(example_path, "Circ_Patch_5GHz.a3dcomp")
    dict_in["cells"][(3, 3)] = {"name": "Circ_Patch_5GHz1"}
    hfss.add_3d_component_array_from_json(dict_in)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 58-61

Set up simulation
~~~~~~~~~~~~~~~~~
Set up a simulation and analyze it.

.. GENERATED FROM PYTHON SOURCE LINES 61-68

.. code-block:: default


    setup = hfss.create_setup()
    setup.props["Frequency"] = "5GHz"
    setup.props["MaximumPasses"] = 3

    hfss.analyze_nominal(num_cores=4)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Key Desktop/ActiveDSOConfigurations/HFSS correctly changed.
    pyaedt info: Solving design setup MySetupAuto
    pyaedt info: Key Desktop/ActiveDSOConfigurations/HFSS correctly changed.
    pyaedt info: Design setup MySetupAuto solved correctly

    True



.. GENERATED FROM PYTHON SOURCE LINES 69-73

Get far field data
~~~~~~~~~~~~~~~~~~
Get far field data. After the simualtion completes, the far
field data is generated port by port and stored in a data class.

.. GENERATED FROM PYTHON SOURCE LINES 73-77

.. code-block:: default


    ffdata = hfss.get_antenna_ffd_solution_data(sphere_name="Infinite Sphere1", setup_name=hfss.nominal_adaptive,
                                                frequencies=[5e9])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: aedt file load time 0.0
    pyaedt info: Far field sphere Infinite Sphere1 is created.
    pyaedt info: Exporting Embedded Element Patterns...
    pyaedt info: Exporting Embedded Element Patterns...Done: 0.7969303131103516 seconds
    pyaedt info: Incident Power: 9.0
    pyaedt info: Peak Realized Gain: 14.330095959618042 dB




.. GENERATED FROM PYTHON SOURCE LINES 78-82

Generate contour plot
~~~~~~~~~~~~~~~~~~~~~
Generate a contour plot. You can define the Theta scan
and Phi scan.

.. GENERATED FROM PYTHON SOURCE LINES 82-86

.. code-block:: default


    ffdata.plot_farfield_contour(qty_str='RealizedGain', convert_to_db=True,
                                 title='Contour at {}Hz'.format(ffdata.frequency))




.. image-sg:: /examples/02-HFSS/images/sphx_glr_Array_001.png
   :alt: Contour at 5000000000.0Hz
   :srcset: /examples/02-HFSS/images/sphx_glr_Array_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Incident Power: 9.0
    pyaedt info: Peak Realized Gain: 14.330095959618042 dB

    <module 'matplotlib.pyplot' from 'c:\\actions-runner\\_work\\pyaedt\\pyaedt\\testenv\\lib\\site-packages\\matplotlib\\pyplot.py'>



.. GENERATED FROM PYTHON SOURCE LINES 87-91

Generate 2D cutout plots
~~~~~~~~~~~~~~~~~~~~~~~~
Genereate 2D cutout plots. You can define the Theta scan
and Phi scan.

.. GENERATED FROM PYTHON SOURCE LINES 91-102

.. code-block:: default


    ffdata.plot_2d_cut(primary_sweep='theta', secondary_sweep_value=[-180, -75, 75],
                       qty_str='RealizedGain',
                       title='Azimuth at {}Hz'.format(ffdata.frequency),
                       convert_to_db=True)

    ffdata.plot_2d_cut(primary_sweep="phi", secondary_sweep_value=30,
                       qty_str='RealizedGain',
                       title='Elevation',
                       convert_to_db=True)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/02-HFSS/images/sphx_glr_Array_002.png
         :alt: Azimuth at 5000000000.0Hz
         :srcset: /examples/02-HFSS/images/sphx_glr_Array_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/02-HFSS/images/sphx_glr_Array_003.png
         :alt: Elevation
         :srcset: /examples/02-HFSS/images/sphx_glr_Array_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Incident Power: 9.0
    pyaedt info: Peak Realized Gain: 14.330095959618042 dB
    pyaedt info: Incident Power: 9.0
    pyaedt info: Peak Realized Gain: 14.330095959618042 dB

    <Figure size 2000x1000 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 103-107

Genereate 3D polar plots in Matplotlib
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Generate 3D polar plots in Matplotlib. You can define
the Theta scan and Phi scan.

.. GENERATED FROM PYTHON SOURCE LINES 107-111

.. code-block:: default


    ffdata.polar_plot_3d(qty_str='RealizedGain',
                         convert_to_db=True)




.. image-sg:: /examples/02-HFSS/images/sphx_glr_Array_004.png
   :alt: 3D Plot
   :srcset: /examples/02-HFSS/images/sphx_glr_Array_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Incident Power: 9.0
    pyaedt info: Peak Realized Gain: 14.330095959618042 dB




.. GENERATED FROM PYTHON SOURCE LINES 112-117

Generate 3D plot in PyVista
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Generate a 3D plot in PyVista. It generates an easy-to-use
interactive plot that you can change on the fly. You can
define the Theta and Phi scan angles.

.. GENERATED FROM PYTHON SOURCE LINES 117-123

.. code-block:: default


    ffdata.polar_plot_3d_pyvista(qty_str='RealizedGain',
                                 convert_to_db=True,
                                 export_image_path=os.path.join(hfss.working_directory, "picture.jpg"),
                                 show=False)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/02-HFSS/images/sphx_glr_Array_005.png
          :alt: Array
          :srcset: /examples/02-HFSS/images/sphx_glr_Array_005.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/02-HFSS/images/sphx_glr_Array_006.png
          :alt: Array
          :srcset: /examples/02-HFSS/images/sphx_glr_Array_006.png
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Incident Power: 9.0
    pyaedt info: Peak Realized Gain: 14.330095959618042 dB
    pyaedt info: Incident Power: 9.0
    pyaedt info: Peak Realized Gain: 14.330095959618042 dB
    pyaedt info: Incident Power: 9.0
    pyaedt info: Peak Realized Gain: 14.330095959618042 dB
    pyaedt info: Incident Power: 9.0
    pyaedt info: Peak Realized Gain: 14.330095959618042 dB
    pyaedt info: Exporting Geometry...
    pyaedt info: Exporting Geometry...Done: 0.1718919277191162 seconds

    <pyvista.plotting.plotting.Plotter object at 0x000001828F285070>



.. GENERATED FROM PYTHON SOURCE LINES 124-127

Release AEDT
~~~~~~~~~~~~
Release AEDT.

.. GENERATED FROM PYTHON SOURCE LINES 127-129

.. code-block:: default


    hfss.release_desktop()




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  59.604 seconds)


.. _sphx_glr_download_examples_02-HFSS_Array.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: Array.py <Array.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: Array.ipynb <Array.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
