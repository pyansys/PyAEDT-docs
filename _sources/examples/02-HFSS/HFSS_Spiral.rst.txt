
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\02-HFSS\HFSS_Spiral.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_02-HFSS_HFSS_Spiral.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-HFSS_HFSS_Spiral.py:


HFSS: spiral inductor
---------------------
This example shows how you can use PyAEDT to create a spiral inductor, solve it, and plot results.

.. GENERATED FROM PYTHON SOURCE LINES 8-11

Import packages
~~~~~~~~~~~~~~~
Import packages.

.. GENERATED FROM PYTHON SOURCE LINES 11-15

.. code-block:: default


    import os
    from pyaedt import Hfss, constants








.. GENERATED FROM PYTHON SOURCE LINES 16-19

Set non-graphical mode
~~~~~~~~~~~~~~~~~~~~~~
Set non-graphical mode. The default is ``False``.

.. GENERATED FROM PYTHON SOURCE LINES 19-22

.. code-block:: default


    non_graphical = os.getenv("PYAEDT_NON_GRAPHICAL", "False").lower() in ("true", "1", "t")








.. GENERATED FROM PYTHON SOURCE LINES 23-27

Launch HFSS
~~~~~~~~~~~
Launch HFSS 2022 R2 in non-graphical mode and change the
units to microns.

.. GENERATED FROM PYTHON SOURCE LINES 27-32

.. code-block:: default


    hfss = Hfss(specified_version="2022.2", non_graphical=non_graphical, designname="A1")
    hfss.modeler.model_units = "um"
    p = hfss.modeler





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Logger Started
    pyaedt info: Launching PyAEDT outside AEDT with CPython and PythonNET.
    pyaedt info: AEDT installation Path C:\Program Files\AnsysEM\v222\Win64.
    pyaedt info: Launching AEDT with module PythonNET.
    pyaedt info: Ansoft.ElectronicsDesktop.2022.2 Started with process ID 4332.
    pyaedt info: Logger file D:\Temp\pyaedt20220722_091734.log in use.
    pyaedt info: pyaedt v0.5.9
    pyaedt info: Python version 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)]
    pyaedt info: Project Project49 has been created.
    pyaedt info: Added design 'A1' of type HFSS.
    pyaedt info: Aedt Objects initialized
    pyaedt info: Variable Manager initialized
    pyaedt info: Design Loaded
    pyaedt info: Successfully loaded project materials !
    pyaedt info: Materials Loaded




.. GENERATED FROM PYTHON SOURCE LINES 33-37

Input variables
~~~~~~~~~~~~~~~
Input variables. You can use the values that follow or edit
them.

.. GENERATED FROM PYTHON SOURCE LINES 37-48

.. code-block:: default


    rin = 10
    width = 2
    spacing = 1
    thickness = 1
    Np = 8
    Nr = 10
    gap = 3
    Tsub = 6









.. GENERATED FROM PYTHON SOURCE LINES 49-53

Standardize polyline
~~~~~~~~~~~~~~~~~~~~
Standardize the polyline using the ``create_line`` to fix
the width, thickness and material.

.. GENERATED FROM PYTHON SOURCE LINES 53-58

.. code-block:: default


    def create_line(pts):
        p.create_polyline(pts, xsection_type="Rectangle", xsection_width=width, xsection_height=thickness, matname="copper")









.. GENERATED FROM PYTHON SOURCE LINES 59-63

Create spiral inductor
 ~~~~~~~~~~~~~~~~~~~~~
Create the spiral inductor. This spiral inductor is not
parameteric, but you could parametrize it later.

.. GENERATED FROM PYTHON SOURCE LINES 63-76

.. code-block:: default


    ind = hfss.modeler.create_spiral(
        internal_radius=rin,
        width=width,
        spacing=spacing,
        turns=Nr,
        faces=Np,
        thickness=thickness,
        material="copper",
        name="Inductor1",
    )









.. GENERATED FROM PYTHON SOURCE LINES 77-80

Center return path
~~~~~~~~~~~~~~~~~~
Center the return path.

.. GENERATED FROM PYTHON SOURCE LINES 80-86

.. code-block:: default


    x0, y0, z0 = ind.points[0]
    x1, y1, z1 = ind.points[-1]
    create_line([(x0 - width / 2, y0, -gap), (abs(x1) + 5, y0, -gap)])
    p.create_box((x0 - width / 2, y0 - width / 2, -gap - thickness / 2), (width, width, gap + thickness), matname="copper")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <pyaedt.modeler.Object3d.Object3d object at 0x000001828F12DF10>



.. GENERATED FROM PYTHON SOURCE LINES 87-90

Create port 1
~~~~~~~~~~~~~
Create port 1.

.. GENERATED FROM PYTHON SOURCE LINES 90-97

.. code-block:: default


    p.create_rectangle(
        constants.PLANE.YZ, (abs(x1) + 5, y0 - width / 2, -gap - thickness / 2), (width, -Tsub + gap), name="port1"
    )
    hfss.create_lumped_port_to_sheet(sheet_name="port1", axisdir=constants.AXIS.Z)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Boundary Lumped Port Port_OKZ0EC has been correctly created.

    <pyaedt.modules.Boundary.BoundaryObject object at 0x00000182FD85B6A0>



.. GENERATED FROM PYTHON SOURCE LINES 98-101

Create port 2
~~~~~~~~~~~~~
Create port 2.

.. GENERATED FROM PYTHON SOURCE LINES 101-107

.. code-block:: default


    create_line([(x1 + width / 2, y1, 0), (x1 - 5, y1, 0)])
    p.create_rectangle(constants.PLANE.YZ, (x1 - 5, y1 - width / 2, -thickness / 2), (width, -Tsub), name="port2")
    hfss.create_lumped_port_to_sheet(sheet_name="port2", axisdir=constants.AXIS.Z)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Boundary Lumped Port Port_C8QCWM has been correctly created.

    <pyaedt.modules.Boundary.BoundaryObject object at 0x000001828F12DB80>



.. GENERATED FROM PYTHON SOURCE LINES 108-111

Create silicon substrate and ground plane
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create the silicon substrate and ground plane.

.. GENERATED FROM PYTHON SOURCE LINES 111-116

.. code-block:: default


    p.create_box([x1 - 20, x1 - 20, -Tsub - thickness / 2], [-2 * x1 + 40, -2 * x1 + 40, Tsub], matname="silicon")

    p.create_box([x1 - 20, x1 - 20, -Tsub - thickness / 2], [-2 * x1 + 40, -2 * x1 + 40, -0.1], matname="PEC")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <pyaedt.modeler.Object3d.Object3d object at 0x000001828EDC3070>



.. GENERATED FROM PYTHON SOURCE LINES 117-120

Assign airbox and radiation
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Assign the airbox and radiation.

.. GENERATED FROM PYTHON SOURCE LINES 120-127

.. code-block:: default


    box = p.create_box(
        [x1 - 20, x1 - 20, -Tsub - thickness / 2 - 0.1], [-2 * x1 + 40, -2 * x1 + 40, 100], name="airbox", matname="air"
    )

    hfss.assign_radiation_boundary_to_objects("airbox")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Boundary Radiation Rad__7GH23J has been correctly created.

    <pyaedt.modules.Boundary.BoundaryObject object at 0x000001828F29E3A0>



.. GENERATED FROM PYTHON SOURCE LINES 128-132

Assign material override
~~~~~~~~~~~~~~~~~~~~~~~~
Assign a material override so that the validation check does
not fail.

.. GENERATED FROM PYTHON SOURCE LINES 132-136

.. code-block:: default


    hfss.change_material_override()






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Enabling Material Override

    True



.. GENERATED FROM PYTHON SOURCE LINES 137-140

Plot model
~~~~~~~~~~
Plot the model.

.. GENERATED FROM PYTHON SOURCE LINES 140-144

.. code-block:: default


    hfss.plot(show=False, export_path=os.path.join(hfss.working_directory, "Image.jpg"), plot_air_objects=False)





.. image-sg:: /examples/02-HFSS/images/sphx_glr_HFSS_Spiral_001.png
   :alt: HFSS Spiral
   :srcset: /examples/02-HFSS/images/sphx_glr_HFSS_Spiral_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <pyaedt.generic.plot.ModelPlotter object at 0x000001828F12D730>



.. GENERATED FROM PYTHON SOURCE LINES 145-148

Create setup
~~~~~~~~~~~~
Create the setup and define a frequency sweep to solve the project.

.. GENERATED FROM PYTHON SOURCE LINES 148-155

.. code-block:: default


    setup1 = hfss.create_setup(setupname="setup1")
    setup1.props["Frequency"] = "10GHz"
    hfss.create_linear_count_sweep("setup1", "GHz", 1e-3, 50, 451, sweep_type="Interpolating")
    hfss.save_project()
    hfss.analyze_all()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Linear count sweep Sweep_T2VMQ5 has been correctly created.
    pyaedt info: Project Project49 Saved correctly

    True



.. GENERATED FROM PYTHON SOURCE LINES 156-160

Get report data
~~~~~~~~~~~~~~~
Get report data and use these formulas to calculate
the inductance and quality factor.

.. GENERATED FROM PYTHON SOURCE LINES 160-164

.. code-block:: default


    L_formula = "1e9*im(1/Y(1,1))/(2*pi*freq)"
    Q_formula = "im(Y(1,1))/re(Y(1,1))"








.. GENERATED FROM PYTHON SOURCE LINES 165-168

Plot calculated values in Matplotlib
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Plot calculated values in Matplotlib.

.. GENERATED FROM PYTHON SOURCE LINES 168-173

.. code-block:: default


    x = hfss.post.get_solution_data([L_formula, Q_formula])
    x.plot([L_formula, Q_formula], math_formula="re", xlabel="Freq", ylabel="L and Q")





.. image-sg:: /examples/02-HFSS/images/sphx_glr_HFSS_Spiral_002.png
   :alt: Simulation Results Plot
   :srcset: /examples/02-HFSS/images/sphx_glr_HFSS_Spiral_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Solution Data Correctly Loaded.

    <Figure size 2000x1000 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 174-177

Save project and close AEDT
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Save the project and close AEDT.

.. GENERATED FROM PYTHON SOURCE LINES 177-181

.. code-block:: default


    hfss.save_project()
    if os.name != "posix":
        hfss.release_desktop()




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Project Project49 Saved correctly





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  37.693 seconds)


.. _sphx_glr_download_examples_02-HFSS_HFSS_Spiral.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: HFSS_Spiral.py <HFSS_Spiral.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: HFSS_Spiral.ipynb <HFSS_Spiral.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
