
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\01-Modeling-Setup\Optimetrics.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-Modeling-Setup_Optimetrics.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-Modeling-Setup_Optimetrics.py:


General: optimetrics setup
--------------------------
This example shows how you can use PyAEDT to create a project in HFSS and create all optimetrics setups.

.. GENERATED FROM PYTHON SOURCE LINES 6-10

.. code-block:: default


    from pyaedt import Hfss
    import os








.. GENERATED FROM PYTHON SOURCE LINES 11-14

Set non-graphical mode
~~~~~~~~~~~~~~~~~~~~~~
Set non-graphical mode. The default is ``False``.

.. GENERATED FROM PYTHON SOURCE LINES 14-17

.. code-block:: default


    non_graphical = os.getenv("PYAEDT_NON_GRAPHICAL", "False").lower() in ("true", "1", "t")








.. GENERATED FROM PYTHON SOURCE LINES 18-22

Initialize object and create design variables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Initialize the ``Hfss`` object and create two needed design variables,
``w1`` and ``w2``.

.. GENERATED FROM PYTHON SOURCE LINES 22-27

.. code-block:: default


    hfss = Hfss(specified_version="2022.2", new_desktop_session=True, non_graphical=non_graphical)
    hfss["w1"] = "1mm"
    hfss["w2"] = "100mm"





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Logger Started
    pyaedt info: Launching PyAEDT outside AEDT with CPython and PythonNET.
    pyaedt info: AEDT installation Path C:\Program Files\AnsysEM\v222\Win64.
    pyaedt info: Launching AEDT with module PythonNET.
    pyaedt info: Ansoft.ElectronicsDesktop.2022.2 Started with process ID 8884.
    pyaedt info: Logger file D:\Temp\pyaedt20220722_091734.log in use.
    pyaedt info: pyaedt v0.5.9
    pyaedt info: Python version 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)]
    pyaedt info: Project Project49 has been created.
    pyaedt info: No design is present. Inserting a new design.
    pyaedt info: Added design 'HFSS_4D6' of type HFSS.
    pyaedt info: Aedt Objects initialized
    pyaedt info: Variable Manager initialized
    pyaedt info: Design Loaded
    pyaedt info: Successfully loaded project materials !
    pyaedt info: Materials Loaded




.. GENERATED FROM PYTHON SOURCE LINES 28-32

Create waveguide with sheets on it
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create one of the standard waveguide structures and parametrize it.
You can also create rectangles of waveguide openings and assign ports later.

.. GENERATED FROM PYTHON SOURCE LINES 32-47

.. code-block:: default


    wg1, p1, p2 = hfss.modeler.create_waveguide(
        [0, 0, 0],
        hfss.AXIS.Y,
        "WG17",
        wg_thickness="w1",
        wg_length="w2",
        create_sheets_on_openings=True,
    )

    model = hfss.plot(show=False)

    model.show_grid = False
    model.plot(os.path.join(hfss.working_directory, "Image.jpg"))




.. image-sg:: /examples/01-Modeling-Setup/images/sphx_glr_Optimetrics_001.png
   :alt: Optimetrics
   :srcset: /examples/01-Modeling-Setup/images/sphx_glr_Optimetrics_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 48-51

Create wave ports on sheets
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create two wave ports on the sheets.

.. GENERATED FROM PYTHON SOURCE LINES 51-55

.. code-block:: default


    hfss.create_wave_port_from_sheet(p1, axisdir=hfss.AxisDir.ZPos, portname="1")
    hfss.create_wave_port_from_sheet(p2, axisdir=hfss.AxisDir.ZPos, portname="2")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Boundary Wave Port 1 has been correctly created.
    pyaedt info: Boundary Wave Port 2 has been correctly created.

    <pyaedt.modules.Boundary.BoundaryObject object at 0x0000018282A35A30>



.. GENERATED FROM PYTHON SOURCE LINES 56-60

Create setup and frequency sweep
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a setup and a frequency sweep to use as the base for optimetrics
setups.

.. GENERATED FROM PYTHON SOURCE LINES 60-66

.. code-block:: default


    setup = hfss.create_setup()
    hfss.create_linear_step_sweep(
        setupname=setup.name, unit="GHz", freqstart=1, freqstop=5, step_size=0.1, sweepname="Sweep1", save_fields=True
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Linear step sweep Sweep1 has been correctly created.

    <pyaedt.modules.SetupTemplates.SweepHFSS object at 0x0000018282A35BE0>



.. GENERATED FROM PYTHON SOURCE LINES 67-72

Optimetrics analysis
----------------------
Create parametrics analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a simple optimetrics parametrics analysis with output calculations.

.. GENERATED FROM PYTHON SOURCE LINES 72-78

.. code-block:: default


    sweep = hfss.parametrics.add("w2", 90, 200, 5)
    sweep.add_variation("w1", 0.1, 2, 10)
    sweep.add_calculation(calculation="dB(S(1,1))", ranges={"Freq": "2.5GHz"})
    sweep.add_calculation(calculation="dB(S(1,1))", ranges={"Freq": "2.6GHz"})





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 79-82

Create sensitivity analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create an optimetrics sensitivity analysis with output calculations.

.. GENERATED FROM PYTHON SOURCE LINES 82-87

.. code-block:: default


    sweep2 = hfss.optimizations.add(calculation="dB(S(1,1))", ranges={"Freq": "2.5GHz"}, optim_type="Sensitivity")
    sweep2.add_variation("w1", 0.1, 3, 0.5)
    sweep2.add_calculation(calculation="dB(S(1,1))", ranges={"Freq": "2.6GHz"})





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 88-91

Create optimization based on goals and calculations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create an optimization analysis based on goals and calculations.

.. GENERATED FROM PYTHON SOURCE LINES 91-102

.. code-block:: default


    sweep3 = hfss.optimizations.add(calculation="dB(S(1,1))", ranges={"Freq": "2.5GHz"})

    sweep3.add_goal(calculation="dB(S(1,1))", ranges={"Freq": "2.6GHz"})
    sweep3.add_goal(calculation="dB(S(1,1))", ranges={"Freq": ("2.6GHz", "5GHz")})
    sweep3.add_goal(
        calculation="dB(S(1,1))",
        ranges={"Freq": ("2.6GHz", "5GHz")},
        condition="Maximize",
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 103-106

Create DX optimization based on a goal and calculation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a DX (DesignXplorer optimization based on a goal and a calculation.

.. GENERATED FROM PYTHON SOURCE LINES 106-110

.. code-block:: default


    sweep4 = hfss.optimizations.add(calculation="dB(S(1,1))", ranges={"Freq": "2.5GHz"}, optim_type="DesignExplorer")
    sweep4.add_goal(calculation="dB(S(1,1))", ranges={"Freq": "2.6GHz"})





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 111-114

Create DOE based on a goal and calculation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a DOE (Design of Experiments) based on a goal and a calculation.

.. GENERATED FROM PYTHON SOURCE LINES 114-119

.. code-block:: default


    sweep5 = hfss.optimizations.add(calculation="dB(S(1,1))", ranges={"Freq": "2.5GHz"}, optim_type="DXDOE")
    sweep5.add_goal(calculation="dB(S(1,1))", ranges={"Freq": "2.6GHz"})
    sweep5.add_calculation(calculation="dB(S(1,1))", ranges={"Freq": "2.6GHz"})





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 120-123

Create DOE based on a goal and calculation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a DOE based on a goal and a calculation.

.. GENERATED FROM PYTHON SOURCE LINES 123-134

.. code-block:: default


    region = hfss.modeler.create_region()
    hfss.assign_radiation_boundary_to_objects(region)
    hfss.insert_infinite_sphere(name="Infinite_1")
    sweep6 = hfss.optimizations.add(
        calculation="RealizedGainTotal",
        solution=hfss.nominal_adaptive,
        ranges={"Freq": "5GHz", "Theta": ["0deg", "10deg", "20deg"], "Phi": "0deg"},
        context="Infinite_1",
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Boundary Radiation Rad__W2TUZ9 has been correctly created.




.. GENERATED FROM PYTHON SOURCE LINES 135-140

Close AEDT
----------
After the simulaton completes, you can close AEDT or release it using the
:func:`pyaedt.Desktop.release_desktop` method.
All methods provide for saving the project before closing.

.. GENERATED FROM PYTHON SOURCE LINES 140-143

.. code-block:: default


    if os.name != "posix":
        hfss.release_desktop()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  23.238 seconds)


.. _sphx_glr_download_examples_01-Modeling-Setup_Optimetrics.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: Optimetrics.py <Optimetrics.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: Optimetrics.ipynb <Optimetrics.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
