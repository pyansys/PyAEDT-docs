
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\00-EDB\00_EDB_Create_VIA.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-EDB_00_EDB_Create_VIA.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-EDB_00_EDB_Create_VIA.py:


EDB: geometry creation
----------------------
This example shows how to use EDB to create a layout.

.. GENERATED FROM PYTHON SOURCE LINES 8-11

Import EDB layout object
~~~~~~~~~~~~~~~~~~~~~~~~
Import the EDB layout object and initialize it on version 2022 R2.

.. GENERATED FROM PYTHON SOURCE LINES 11-25

.. code-block:: default


    import time
    import os
    import tempfile
    from pyaedt import Edb
    from pyaedt.generic.general_methods import generate_unique_name

    start = time.time()

    tmpfold = tempfile.gettempdir()
    aedb_path = os.path.join(tmpfold, generate_unique_name("pcb") + ".aedb")
    print(aedb_path)
    edb = Edb(edbpath=aedb_path, edbversion="2022.2")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    D:\Temp\pcb_SQNHS9.aedb
    pyaedt info: Logger started on D:\Temp\pyaedt20220722_091734.log
    pyaedt info: Logger is initialized in EDB.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Objects Initialized
    pyaedt info: EDB D:\Temp\pcb_SQNHS9.aedb was created correctly.
    pyaedt info: EDB was initialized.




.. GENERATED FROM PYTHON SOURCE LINES 26-30

Add stackup layers
~~~~~~~~~~~~~~~~~~
Add stackup layers.


.. GENERATED FROM PYTHON SOURCE LINES 30-35

.. code-block:: default

    if edb:
        edb.core_stackup.stackup_layers.add_layer("GND")
        edb.core_stackup.stackup_layers.add_layer("Diel", "GND", layerType=1, thickness="0.1mm", material="FR4_epoxy")
        edb.core_stackup.stackup_layers.add_layer("TOP", "Diel", thickness="0.05mm")








.. GENERATED FROM PYTHON SOURCE LINES 36-39

Create signal net and ground planes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a signal net and ground planes.

.. GENERATED FROM PYTHON SOURCE LINES 39-55

.. code-block:: default


    if edb:
        points = [
            [0.0, 0],
            [100e-3, 0.0],
        ]
        path = edb.core_primitives.Shape("polygon", points=points)
        edb.core_primitives.create_path(path, "TOP", width=1e-3)
        points = [[0.0, 1e-3], [0.0, 10e-3], [100e-3, 10e-3], [100e-3, 1e-3], [0.0, 1e-3]]
        plane = edb.core_primitives.Shape("polygon", points=points)
        edb.core_primitives.create_polygon(plane, "TOP")

        points = [[0.0, -1e-3], [0.0, -10e-3], [100e-3, -10e-3], [100e-3, -1e-3], [0.0, -1e-3]]
        plane = edb.core_primitives.Shape("polygon", points=points)
        edb.core_primitives.create_polygon(plane, "TOP")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Primitives Updated




.. GENERATED FROM PYTHON SOURCE LINES 56-59

Create vias with parametric positions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create vias with parametric positions.

.. GENERATED FROM PYTHON SOURCE LINES 59-73

.. code-block:: default


    if edb:
        edb.core_padstack.create_padstack("MyVia")
        edb.core_padstack.place_padstack([5e-3, 5e-3], "MyVia")
        edb.core_padstack.place_padstack([15e-3, 5e-3], "MyVia")
        edb.core_padstack.place_padstack([35e-3, 5e-3], "MyVia")
        edb.core_padstack.place_padstack([45e-3, 5e-3], "MyVia")
        edb.core_padstack.place_padstack([5e-3, -5e-3], "MyVia")
        edb.core_padstack.place_padstack([15e-3, -5e-3], "MyVia")
        edb.core_padstack.place_padstack([35e-3, -5e-3], "MyVia")
        edb.core_padstack.place_padstack([45e-3, -5e-3], "MyVia")

    edb.core_nets.plot(None)




.. image-sg:: /examples/00-EDB/images/sphx_glr_00_EDB_Create_VIA_001.png
   :alt: Cell_19SXI2
   :srcset: /examples/00-EDB/images/sphx_glr_00_EDB_Create_VIA_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Padstack MyVia create correctly
    pyaedt info: Nets Point Generation time 0.0 seconds




.. GENERATED FROM PYTHON SOURCE LINES 74-77

Save and close EDB
~~~~~~~~~~~~~~~~~~
Save and close EDB.

.. GENERATED FROM PYTHON SOURCE LINES 77-84

.. code-block:: default


    if edb:
        edb.save_edb()
        edb.close_edb()
    print("EDB saved correctly to {}. You can import in AEDT.".format(aedb_path))
    end = time.time() - start
    print(end)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: EDB file release time: 0.00ms
    EDB saved correctly to D:\Temp\pcb_SQNHS9.aedb. You can import in AEDT.
    13.625972032546997





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.626 seconds)


.. _sphx_glr_download_examples_00-EDB_00_EDB_Create_VIA.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 00_EDB_Create_VIA.py <00_EDB_Create_VIA.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 00_EDB_Create_VIA.ipynb <00_EDB_Create_VIA.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
