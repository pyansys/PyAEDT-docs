
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\00-EDB\01_edb_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-EDB_01_edb_example.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-EDB_01_edb_example.py:


EDB: Siwave analysis from EDB setup
-----------------------------------
Use EDB to interact with a layout.

.. GENERATED FROM PYTHON SOURCE LINES 6-29

.. code-block:: default


    import shutil

    import os
    import time
    import tempfile
    from pyaedt import generate_unique_name, examples

    tmpfold = tempfile.gettempdir()
    temp_folder = os.path.join(tmpfold, generate_unique_name("Example"))
    if not os.path.exists(temp_folder):
        os.makedirs(temp_folder)
    example_path = examples.download_aedb()
    targetfolder = os.path.join(temp_folder, "Galileo.aedb")
    if os.path.exists(targetfolder):
        shutil.rmtree(targetfolder)
    shutil.copytree(example_path[:-8], targetfolder)
    targetfile = os.path.join(targetfolder)
    siwave_file = os.path.join(temp_folder, "Galileo.siw")
    print(targetfile)
    aedt_file = targetfile[:-4] + "aedt"






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    D:\Temp\Example_9Q5M42\Galileo.aedb




.. GENERATED FROM PYTHON SOURCE LINES 30-33

.. code-block:: default


    from pyaedt import Edb








.. GENERATED FROM PYTHON SOURCE LINES 34-37

Launch EDB
~~~~~~~~~~
Launch the :class:`pyaedt.Edb` class, using EDB 2022 R2 and SI units.

.. GENERATED FROM PYTHON SOURCE LINES 37-42

.. code-block:: default


    if os.path.exists(aedt_file):
        os.remove(aedt_file)
    edb = Edb(edbpath=targetfile, edbversion="2022.2")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Logger started on D:\Temp\pyaedt20220722_091734.log
    pyaedt info: Logger is initialized in EDB.
    pyaedt info: EDB Path D:\Temp\Example_9Q5M42\Galileo.aedb
    pyaedt info: EDB Version 2022.2
    pyaedt info: EDB Standalone True
    pyaedt info: Database Opened
    pyaedt info: Cell Galileo_um Opened
    pyaedt info: C:\actions-runner\_work\PyAEDT\PyAEDT\pyaedt\dlls\EDBLib
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Objects Initialized
    pyaedt info: Builder was initialized.
    pyaedt info: EDB was initialized.




.. GENERATED FROM PYTHON SOURCE LINES 43-47

Compute nets and components
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Computes nets and components.
There are queries for nets, stackups, layers, components, and geometries.

.. GENERATED FROM PYTHON SOURCE LINES 47-53

.. code-block:: default


    print("Nets {}".format(len(edb.core_nets.nets.keys())))
    start = time.time()
    print("Components {}".format(len(edb.core_components.components.keys())))
    print("elapsed time = ", time.time() - start)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Nets 432
    Components 531
    elapsed time =  0.0




.. GENERATED FROM PYTHON SOURCE LINES 54-60

Get pin position
~~~~~~~~~~~~~~~~
Get the position for a specific pin.
The next section shows how to get all pins for a specific component and
the positions of each of them.
Each pin is a list of ``[X, Y]`` coordinate positions.

.. GENERATED FROM PYTHON SOURCE LINES 60-65

.. code-block:: default


    pins = edb.core_components.get_pin_from_component("U2")
    for pin in pins:
        print(edb.core_components.get_pin_position(pin))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [0.08144438899999999, 0.0313309]
    [0.082944411, 0.0313309]
    [0.08144438899999999, 0.0324739]
    [0.082944411, 0.0324739]
    [0.081944388, 0.0313309]
    [0.082444412, 0.0313309]
    [0.081944388, 0.0324739]
    [0.082444412, 0.0324739]
    [0.081407, 0.0319024]
    [0.0829818, 0.0319024]




.. GENERATED FROM PYTHON SOURCE LINES 66-69

Get all nets connected to a component
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get all nets connected to a specific component.

.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: default


    edb.core_components.get_component_net_connection_info("U2")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'refdes': ['U2', 'U2', 'U2', 'U2', 'U2', 'U2', 'U2', 'U2', 'U2', 'U2'], 'pin_name': ['1', '4', '9', '6', '2', '3', '8', '7', '10', '5'], 'net_name': ['IO0_MUX', 'IO1_GPIO', 'LVL_RXD', 'IO1', 'IO0_GPIO', 'GND', 'VSHLD_S5', 'LVL_TXD', 'IO0', 'IO1_MUX']}



.. GENERATED FROM PYTHON SOURCE LINES 73-76

Compute rats
~~~~~~~~~~~~
Computes rats.

.. GENERATED FROM PYTHON SOURCE LINES 76-79

.. code-block:: default


    rats = edb.core_components.get_rats()








.. GENERATED FROM PYTHON SOURCE LINES 80-85

Get all DC-connected net lists through inductance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get all DC-connected net lists through inductance.
The inputs needed are ground net lists. The returned list is of all nets
connected to a ground through an inductor.

.. GENERATED FROM PYTHON SOURCE LINES 85-90

.. code-block:: default


    GROUND_NETS = ["GND", "PGND"]
    dc_connected_net_list = edb.core_nets.get_dcconnected_net_list(GROUND_NETS)
    print(dc_connected_net_list)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [{'BST_V1P5_S5', 'V1P5_S5'}, {'BST_V3P3_S5', 'V3P3_S5'}, {'BST_V1P0_S0', 'V1P0_S0'}]




.. GENERATED FROM PYTHON SOURCE LINES 91-94

Get power tree based on a specific net
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get the power tree based on a specific net.

.. GENERATED FROM PYTHON SOURCE LINES 94-101

.. code-block:: default


    VRM = "U3A1"
    OUTPUT_NET = "BST_V1P0_S0"
    powertree_df, component_list_columns, net_group = edb.core_nets.get_powertree(OUTPUT_NET, GROUND_NETS)
    for el in powertree_df:
        print(el)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ['C4A2', '1', 'BST_V1P0_S0', 'Capacitor', '602433-057', '1']
    ['L4B1', '1', 'BST_V1P0_S0', 'Inductor', 'A32422-019', '1']
    ['U3A1', '36', 'BST_V1P0_S0', 'IC', 'G43225-001', '36-37']
    ['U3A1', '37', 'BST_V1P0_S0', 'IC', 'G43225-001', '36-37']
    ['U2A5', 'Y14', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'AB14', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'AD14', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'V14', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'Y20', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'Y18', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'Y16', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'AB20', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'AB18', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'T18', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'V20', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'V18', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['U2A5', 'V16', 'V1P0_S0', 'IC', 'IPD031-201', 'Y14-AB14-AD14-V14-Y20-Y18-Y16-AB20-AB18-T18-V20-V18-V16']
    ['C2L14', '1', 'V1P0_S0', 'Capacitor', 'A36096-066', '1']
    ['R2L19', '1', 'V1P0_S0', 'Resistor', 'E41735-001', '1']
    ['C3L22', '1', 'V1P0_S0', 'Capacitor', 'A36096-108', '1']
    ['C3B10', '1', 'V1P0_S0', 'Capacitor', '602433-081', '1']
    ['C2B2', '1', 'V1P0_S0', 'Capacitor', '602433-081', '1']
    ['C3L28', '1', 'V1P0_S0', 'Capacitor', 'C83410-012', '1']
    ['C3L17', '1', 'V1P0_S0', 'Capacitor', 'C83410-012', '1']
    ['C3L15', '1', 'V1P0_S0', 'Capacitor', 'C83410-012', '1']
    ['C3L18', '1', 'V1P0_S0', 'Capacitor', 'C83410-012', '1']
    ['C3L20', '1', 'V1P0_S0', 'Capacitor', 'C83410-012', '1']
    ['C3L26', '1', 'V1P0_S0', 'Capacitor', 'C83410-012', '1']
    ['C3L24', '1', 'V1P0_S0', 'Capacitor', 'C83410-012', '1']
    ['C3L29', '1', 'V1P0_S0', 'Capacitor', 'C83410-012', '1']
    ['C3B9', '1', 'V1P0_S0', 'Capacitor', 'C97875-001', '1']
    ['C3B11', '1', 'V1P0_S0', 'Capacitor', 'C97875-001', '1']
    ['FB3L1', '2', 'V1P0_S0', 'Other', 'G22224-001', '2']
    ['L4B1', '2', 'V1P0_S0', 'Inductor', 'A32422-019', '2']
    ['C2B12', '1', 'V1P0_S0', 'Capacitor', 'E16347-001', '1']
    ['C3B17', '1', 'V1P0_S0', 'Capacitor', 'E16347-001', '1']




.. GENERATED FROM PYTHON SOURCE LINES 102-106

Delete all RLCs with only one pin
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Delete all RLCs with only one pin. This method provides a useful way of
removing components not needed in the simulation.

.. GENERATED FROM PYTHON SOURCE LINES 106-109

.. code-block:: default


    edb.core_components.delete_single_pin_rlc()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Component R2B29 deleted
    pyaedt info: Component R3M13 deleted

    ['R2B29', 'R3M13']



.. GENERATED FROM PYTHON SOURCE LINES 110-113

Delete components
~~~~~~~~~~~~~~~~~
Delete manually one or more components.

.. GENERATED FROM PYTHON SOURCE LINES 113-116

.. code-block:: default


    edb.core_components.delete_component("C3B17")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 117-120

Delete nets
~~~~~~~~~~~
Delete manually one or more nets.

.. GENERATED FROM PYTHON SOURCE LINES 120-123

.. code-block:: default


    edb.core_nets.delete_nets("A0_N")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Net A0_N Deleted

    ['A0_N']



.. GENERATED FROM PYTHON SOURCE LINES 124-127

Get stackup limits
~~~~~~~~~~~~~~~~~~
Get the stackup limits, top and bottom layers, and elevations.

.. GENERATED FROM PYTHON SOURCE LINES 127-130

.. code-block:: default


    print(edb.core_stackup.stackup_limits())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ('UNNAMED_000', 0.00203454, 'UNNAMED_012', 0.0)




.. GENERATED FROM PYTHON SOURCE LINES 131-134

Create coaxial port
~~~~~~~~~~~~~~~~~~~
Create a coaxial port for the HFSS simulation.

.. GENERATED FROM PYTHON SOURCE LINES 134-137

.. code-block:: default


    edb.core_hfss.create_coax_port_on_component("U2A5", "V1P0_S0")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['U2A5_V1P0_S0_Y14', 'U2A5_V1P0_S0_AB14', 'U2A5_V1P0_S0_AD14', 'U2A5_V1P0_S0_V14', 'U2A5_V1P0_S0_Y20', 'U2A5_V1P0_S0_Y18', 'U2A5_V1P0_S0_Y16', 'U2A5_V1P0_S0_AB20', 'U2A5_V1P0_S0_AB18', 'U2A5_V1P0_S0_T18', 'U2A5_V1P0_S0_V20', 'U2A5_V1P0_S0_V18', 'U2A5_V1P0_S0_V16']



.. GENERATED FROM PYTHON SOURCE LINES 138-142

Edit stackup and material
~~~~~~~~~~~~~~~~~~~~~~~~~
Edit the stackup and the material. You can change stackup
properties with assignment and create materials and assign to layers.

.. GENERATED FROM PYTHON SOURCE LINES 142-151

.. code-block:: default


    edb.core_stackup.stackup_layers.layers["TOP"].thickness = "75um"
    # edb.core_stackup.stackup_layers.layers["Diel1"].material_name = "Fr4_epoxy"
    edb.core_stackup.create_debye_material("My_Debye", 5, 3, 0.02, 0.05, 1e5, 1e9)
    # edb.core_stackup.stackup_layers.layers['BOTTOM'].material_name = "My_Debye"
    # edb.core_stackup.stackup_layers.remove_layer("Signal3")
    # edb.core_stackup.stackup_layers.remove_layer("Signal1")






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Ansys.Ansoft.Edb.Definition.MaterialDef object at 0x00000182FD71ED80>



.. GENERATED FROM PYTHON SOURCE LINES 152-155

Create voltage source and Siwave DCIR analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a voltage source and then set up a DCIR analysis.

.. GENERATED FROM PYTHON SOURCE LINES 155-166

.. code-block:: default


    edb.core_siwave.create_voltage_source_on_net("U2A5", "V1P5_S3", "U2A5", "GND", 3.3, 0, "V1")
    edb.core_siwave.create_current_source_on_net("U1B5", "V1P5_S3", "U1B5", "GND", 1.0, 0, "I1")
    settings = edb.core_siwave.get_siwave_dc_setup_template()
    settings.accuracy_level = 0
    settings.use_dc_custom_settings = True
    settings.name = "myDCIR_4"
    # settings.pos_term_to_ground = "I1"
    settings.neg_term_to_ground = "V1"
    edb.core_siwave.add_siwave_dc_analysis(settings)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 167-170

Save modifications
~~~~~~~~~~~~~~~~~~
Save modifications.

.. GENERATED FROM PYTHON SOURCE LINES 170-176

.. code-block:: default


    edb.save_edb()
    edb.core_nets.plot(None, "TOP")

    edb.solve_siwave()




.. image-sg:: /examples/00-EDB/images/sphx_glr_01_edb_example_001.png
   :alt: Galileo_um
   :srcset: /examples/00-EDB/images/sphx_glr_01_edb_example_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Primitives Updated
    pyaedt info: Nets Point Generation time 5.297 seconds

    True



.. GENERATED FROM PYTHON SOURCE LINES 177-180

Close EDB
~~~~~~~~~
Closes EDB. After EDB is closed, it can be opened by AEDT.

.. GENERATED FROM PYTHON SOURCE LINES 180-183

.. code-block:: default


    edb.close_edb()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: EDB file release time: 0.00ms

    True



.. GENERATED FROM PYTHON SOURCE LINES 184-187

Postprocess in Siwave
~~~~~~~~~~~~~~~~~~~~~
Open Siwave and generate a report. This works on Window only.

.. GENERATED FROM PYTHON SOURCE LINES 187-196

.. code-block:: default


    # from pyaedt import Siwave
    # siwave = Siwave("2022.2")
    # siwave.open_project(siwave_file)
    # report_file = os.path.join(temp_folder,'Galileo.htm')
    #
    # siwave.export_siwave_report("myDCIR_4", report_file)
    # siwave.close_project()
    # siwave.quit_application()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  44.049 seconds)


.. _sphx_glr_download_examples_00-EDB_01_edb_example.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 01_edb_example.py <01_edb_example.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 01_edb_example.ipynb <01_edb_example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
