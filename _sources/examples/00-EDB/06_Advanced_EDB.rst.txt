
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\00-EDB\06_Advanced_EDB.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-EDB_06_Advanced_EDB.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-EDB_06_Advanced_EDB.py:


EDB: parametric via creation
----------------------------
This example shows how to use EDB to create a layout.

.. GENERATED FROM PYTHON SOURCE LINES 6-19

.. code-block:: default

    # sphinx_gallery_thumbnail_path = 'Resources/viawizard.png'

    import os
    import numpy as np
    import tempfile
    from pyaedt import Edb
    from pyaedt.generic.general_methods import generate_unique_name

    tmpfold = tempfile.gettempdir()
    if not os.path.exists(tmpfold):
        os.mkdir(tmpfold)
    aedb_path = os.path.join(tmpfold, generate_unique_name("via_opt") + ".aedb")








.. GENERATED FROM PYTHON SOURCE LINES 20-23

Create stackup
~~~~~~~~~~~~~~
The ``StackupSimple`` class creates a stackup based on few inputs. It is used later.

.. GENERATED FROM PYTHON SOURCE LINES 23-141

.. code-block:: default


    class StackupSimple:
        """Creates a typical PCB stackup"""

        def __init__(
            self,
            _edb,
            layer_count,
            diel_material_name="FR4_epoxy",
            diel_thickness="0.15mm",
            cond_thickness_outer="0.05mm",
            cond_thickness_inner="0.017mm",
            soldermask_thickness="0.05mm",
        ):
            """

            Parameters
            ----------
            _edb : Edb
            layer_count : int
                The number of stackup layers
            diel_material_name : str
                The name of the dielectric material defined in material library
            diel_thickness : str
                Thickess os all dielectric layers
            cond_thickness_outer : str
                Outer layer conductor thickness
            cond_thickness_inner : str
                Inner layour conductor thickness
            soldermask_thickness : str
                Soldermask thickness
            """
            self._edb = _edb
            self.layer_count = layer_count
            self.diel_material_name = diel_material_name
            self.diel_thickness = diel_thickness
            self.cond_thickness_outer = cond_thickness_outer
            self.cond_thickness_inner = cond_thickness_inner
            self.soldermask_thickness = soldermask_thickness

        def create_stackup(self):
            self._create_stackup_layer_list()
            self._edb_create_stackup()

        def _create_stackup_layer_list(self):
            self.stackup_list = []

            # Create top soldermask layer
            smt = {"layer_type": 1, "layer_name": "SMT", "material": "SolderMask", "thickness": self.soldermask_thickness}
            self.stackup_list.append(smt)

            for i in np.arange(1, self.layer_count + 1):

                # Create conductor layer
                fill_material = self.diel_material_name

                if i in [1, self.layer_count]:
                    thickness = self.cond_thickness_outer
                    fill_material = "SolderMask"
                else:
                    thickness = self.cond_thickness_inner

                cond_layer = {
                    "layer_type": 0,
                    "layer_name": "L{}".format(str(i)),
                    "fill_material": fill_material,
                    "thickness": thickness,
                }
                self.stackup_list.append(cond_layer)

                # Check if it is the last conductor layer
                if i == self.layer_count:
                    break

                # Create dielectric layer
                diel_material = self.diel_material_name
                diel_thickness = self.diel_thickness

                dielectric_layer = {
                    "layer_type": 1,
                    "layer_name": "D{}".format(str(i)),
                    "material": diel_material,
                    "thickness": diel_thickness,
                }
                self.stackup_list.append(dielectric_layer)

            # Create bottom soldermask layer
            smb = {"layer_type": 1, "layer_name": "SMB", "material": "SolderMask", "thickness": self.soldermask_thickness}
            self.stackup_list.append(smb)

        def _edb_create_stackup(self):
            base_layer = None
            while len(self.stackup_list):

                layer = self.stackup_list.pop(-1)
                if layer["layer_type"] == 1:

                    self._edb.core_stackup.stackup_layers.add_layer(
                        layerName=layer["layer_name"],
                        start_layer=base_layer,
                        material=layer["material"],
                        thickness=layer["thickness"],
                        layerType=1,
                    )
                    base_layer = layer["layer_name"]
                else:

                    self._edb.core_stackup.stackup_layers.add_layer(
                        layerName=layer["layer_name"],
                        start_layer=base_layer,
                        material="copper",
                        fillMaterial=layer["fill_material"],
                        thickness=layer["thickness"],
                        layerType=0,
                    )
                    base_layer = layer["layer_name"]









.. GENERATED FROM PYTHON SOURCE LINES 142-145

Create ground plane
~~~~~~~~~~~~~~~~~~~
Create a ground plane on specific layers.

.. GENERATED FROM PYTHON SOURCE LINES 145-152

.. code-block:: default


    def _create_ground_planes(edb, layers):
        plane = edb.core_primitives.Shape("rectangle", pointA=["-3mm", "-3mm"], pointB=["3mm", "3mm"])
        for i in layers:
            edb.core_primitives.create_polygon(plane, i, net_name="GND")









.. GENERATED FROM PYTHON SOURCE LINES 153-156

Create EDB
~~~~~~~~~~
Create EDB. If the path doesn't exist, PyAEDT automatically generates a new AEDB folder.

.. GENERATED FROM PYTHON SOURCE LINES 156-159

.. code-block:: default


    edb = Edb(edbpath=aedb_path, edbversion="2022.2")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Logger started on D:\Temp\pyaedt20220722_091734.log
    pyaedt info: Logger is initialized in EDB.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Objects Initialized
    pyaedt info: EDB D:\Temp\via_opt_GWXSY7.aedb was created correctly.
    pyaedt info: EDB was initialized.




.. GENERATED FROM PYTHON SOURCE LINES 160-163

Create stackup layers
~~~~~~~~~~~~~~~~~~~~~
Create stackup layers.

.. GENERATED FROM PYTHON SOURCE LINES 163-185

.. code-block:: default


    layout_count = 12
    diel_material_name = "FR4_epoxy"
    diel_thickness = "0.15mm"
    cond_thickness_outer = "0.05mm"
    cond_thickness_inner = "0.017mm"
    soldermask_thickness = "0.05mm"
    trace_in_layer = "L1"
    trace_out_layer = "L10"
    gvia_num = 10
    gvia_angle = 30

    StackupSimple(
        edb,
        layer_count=layout_count,
        diel_material_name=diel_material_name,
        diel_thickness=diel_thickness,
        cond_thickness_outer=cond_thickness_outer,
        cond_thickness_inner=cond_thickness_inner,
        soldermask_thickness=soldermask_thickness,
    ).create_stackup()








.. GENERATED FROM PYTHON SOURCE LINES 186-190

Create parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create all variables. If a variable has a ``$`` prefix, it is a project variable.
Otherwise, is is a design variable.

.. GENERATED FROM PYTHON SOURCE LINES 190-200

.. code-block:: default


    giva_angle_rad = gvia_angle / 180 * np.pi

    edb.add_design_variable("$via_hole_size", "0.3mm")
    edb.add_design_variable("$antipaddiam", "0.7mm")
    edb.add_design_variable("$paddiam", "0.5mm")
    edb.add_design_variable("via_pitch", "1mm", is_parameter=True)
    edb.add_design_variable("trace_in_width", "0.2mm", is_parameter=True)
    edb.add_design_variable("trace_out_width", "0.1mm", is_parameter=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Creating project variable $via_hole_size.
    pyaedt info: Creating project variable $antipaddiam.
    pyaedt info: Creating project variable $paddiam.
    pyaedt info: Creating parameter default via_pitch
    pyaedt info: Creating parameter default trace_in_width
    pyaedt info: Creating parameter default trace_out_width

    (True, <Ansys.Ansoft.Edb.Utility.VariableServer object at 0x0000018281151B80>)



.. GENERATED FROM PYTHON SOURCE LINES 201-205

Create padstacks
~~~~~~~~~~~~~~~~
Create two padstacks, one for the ground and one for the signal. The padstacks
are parametric.

.. GENERATED FROM PYTHON SOURCE LINES 205-211

.. code-block:: default


    edb.core_padstack.create_padstack(
        padstackname="SVIA", holediam="$via_hole_size", antipaddiam="$antipaddiam", paddiam="$paddiam"
    )
    edb.core_padstack.create_padstack(padstackname="GVIA", holediam="0.3mm", antipaddiam="0.7mm", paddiam="0.5mm")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Padstack SVIA create correctly
    pyaedt info: Padstack GVIA create correctly

    'GVIA'



.. GENERATED FROM PYTHON SOURCE LINES 212-215

Place padstack for signal
~~~~~~~~~~~~~~~~~~~~~~~~~
Place the padstack for the signal.

.. GENERATED FROM PYTHON SOURCE LINES 215-218

.. code-block:: default


    edb.core_padstack.place_padstack([0, 0], "SVIA", net_name="RF", fromlayer=trace_in_layer, tolayer=trace_out_layer)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    4294967296



.. GENERATED FROM PYTHON SOURCE LINES 219-223

Place padstack for ground
~~~~~~~~~~~~~~~~~~~~~~~~~
Place the padstack for the  ground. A loop iterates and places multiple ground
vias on different positions.

.. GENERATED FROM PYTHON SOURCE LINES 223-251

.. code-block:: default


    gvia_num_side = gvia_num / 2

    if gvia_num_side % 2:

        # Even number of ground vias on each side
        edb.core_padstack.place_padstack(["via_pitch", 0], "GVIA", net_name="GND")
        edb.core_padstack.place_padstack(["via_pitch*-1", 0], "GVIA", net_name="GND")
        for i in np.arange(1, gvia_num_side / 2):
            xloc = "{}*{}".format(np.cos(giva_angle_rad * i), "via_pitch")
            yloc = "{}*{}".format(np.sin(giva_angle_rad * i), "via_pitch")
            edb.core_padstack.place_padstack([xloc, yloc], "GVIA", net_name="GND")
            edb.core_padstack.place_padstack([xloc, yloc + "*-1"], "GVIA", net_name="GND")

            edb.core_padstack.place_padstack([xloc + "*-1", yloc], "GVIA", net_name="GND")
            edb.core_padstack.place_padstack([xloc + "*-1", yloc + "*-1"], "GVIA", net_name="GND")
    else:

        # Odd number of ground vias on each side
        for i in np.arange(0, gvia_num_side / 2):
            xloc = "{}*{}".format(np.cos(giva_angle_rad * (i + 0.5)), "via_pitch")
            yloc = "{}*{}".format(np.sin(giva_angle_rad * (i + 0.5)), "via_pitch")
            edb.core_padstack.place_padstack([xloc, yloc], "GVIA", net_name="GND")
            edb.core_padstack.place_padstack([xloc, yloc + "*-1"], "GVIA", net_name="GND")

            edb.core_padstack.place_padstack([xloc + "*-1", yloc], "GVIA", net_name="GND")
            edb.core_padstack.place_padstack([xloc + "*-1", yloc + "*-1"], "GVIA", net_name="GND")








.. GENERATED FROM PYTHON SOURCE LINES 252-255

Generate traces
~~~~~~~~~~~~~~~
Generate and place parametric traces.

.. GENERATED FROM PYTHON SOURCE LINES 255-271

.. code-block:: default


    path = edb.core_primitives.Shape("polygon", points=[[0, 0], [0, "-3mm"]])
    edb.core_primitives.create_path(
        path, layer_name=trace_in_layer, net_name="RF", width="trace_in_width", start_cap_style="Flat", end_cap_style="Flat"
    )

    path = edb.core_primitives.Shape("polygon", points=[[0, 0], [0, "3mm"]])
    edb.core_primitives.create_path(
        path,
        layer_name=trace_out_layer,
        net_name="RF",
        width="trace_out_width",
        start_cap_style="Flat",
        end_cap_style="Flat",
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Primitives Updated

    <Ansys.Ansoft.Edb.Cell.Primitive.Path object at 0x000001828EFEB400>



.. GENERATED FROM PYTHON SOURCE LINES 272-275

Generate ground layers
~~~~~~~~~~~~~~~~~~~~~~
Geneerate and place ground layers.

.. GENERATED FROM PYTHON SOURCE LINES 275-281

.. code-block:: default


    ground_layers = ["L" + str(i + 1) for i in np.arange(layout_count)]
    ground_layers.remove(trace_in_layer)
    ground_layers.remove(trace_out_layer)
    _create_ground_planes(edb=edb, layers=ground_layers)








.. GENERATED FROM PYTHON SOURCE LINES 282-285

Save EDB and close
~~~~~~~~~~~~~~~~~~
Save EDB and close.

.. GENERATED FROM PYTHON SOURCE LINES 285-290

.. code-block:: default


    edb.save_edb()
    edb.close_edb()

    print("aedb Saved in {}".format(aedb_path))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: EDB file release time: 0.00ms
    aedb Saved in D:\Temp\via_opt_GWXSY7.aedb





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.525 seconds)


.. _sphx_glr_download_examples_00-EDB_06_Advanced_EDB.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 06_Advanced_EDB.py <06_Advanced_EDB.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 06_Advanced_EDB.ipynb <06_Advanced_EDB.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
