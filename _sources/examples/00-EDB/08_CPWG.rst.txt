
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\00-EDB\08_CPWG.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-EDB_08_CPWG.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-EDB_08_CPWG.py:


EDB: fully parameterized CPWG design
------------------------------------
This example shows how to use HFSS 3D Layout to create a parametric design
for a CPWG (coplanar waveguide with ground).

.. GENERATED FROM PYTHON SOURCE LINES 9-13

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Peform required imports. Importing the ``Hfss3dlayout`` object initializes it
on version 2022 R2.

.. GENERATED FROM PYTHON SOURCE LINES 13-21

.. code-block:: default


    import tempfile
    from pyaedt import Edb
    from pyaedt.generic.general_methods import generate_unique_name
    from pyaedt import Hfss3dLayout
    import os
    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 22-25

Set non-graphical mode
~~~~~~~~~~~~~~~~~~~~~~
Set non-graphical mode. The default is ``False``.

.. GENERATED FROM PYTHON SOURCE LINES 25-28

.. code-block:: default


    non_graphical = os.getenv("PYAEDT_NON_GRAPHICAL", "False").lower() in ("true", "1", "t")








.. GENERATED FROM PYTHON SOURCE LINES 29-32

Launch EDB
~~~~~~~~~~
Launch EDB.

.. GENERATED FROM PYTHON SOURCE LINES 32-117

.. code-block:: default


    tmpfold = tempfile.gettempdir()
    aedb_path = os.path.join(tmpfold, generate_unique_name("pcb") + ".aedb")
    print(aedb_path)
    edbapp = Edb(edbpath=aedb_path, edbversion="2022.2")

    # Define parameters
    # ~~~~~~~~~~~~~~~~~
    # Define parameters.

    params = {"$ms_width": "0.4mm",
              "$ms_clearance": "0.3mm",
              "$ms_length": "20mm",
              }
    for par_name in params:
        edbapp.add_design_variable(par_name, params[par_name])

    # Create stackup
    # ~~~~~~~~~~~~~~
    # Create a symmetric stackup.

    edbapp.core_stackup.create_symmetric_stackup(2)

    # Draw planes
    # ~~~~~~~~~~~
    # Draw planes.

    plane_lw_pt = ["0mm", "-3mm"]
    plane_up_pt = ["$ms_length", "3mm"]

    top_layer_obj = edbapp.core_primitives.create_rectangle("TOP", net_name="gnd",
                                                            lower_left_point=plane_lw_pt,
                                                            upper_right_point=plane_up_pt)
    bot_layer_obj = edbapp.core_primitives.create_rectangle("BOTTOM", net_name="gnd",
                                                            lower_left_point=plane_lw_pt,
                                                            upper_right_point=plane_up_pt)
    layer_dict = {"TOP": top_layer_obj,
                  "BOTTOM": bot_layer_obj}

    # Draw trace
    # ~~~~~~~~~~
    # Draw a trace.

    trace_path = [["0", "0"], ["$ms_length", "0"]]
    edbapp.core_primitives.create_trace(trace_path,
                                        layer_name="TOP",
                                        width="$ms_width",
                                        net_name="sig",
                                        start_cap_style="Flat",
                                        end_cap_style="Flat"
                                        )

    # Create trace to plane clearance
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Create a trace to the plane clearance.

    poly_void = edbapp.core_primitives.create_trace(trace_path, layer_name="TOP", net_name="gnd",
                                                    width="{}+2*{}".format("$ms_width", "$ms_clearance"),
                                                    start_cap_style="Flat",
                                                    end_cap_style="Flat")
    edbapp.core_primitives.add_void(layer_dict["TOP"], poly_void)

    # Create ground via padstack and place ground stitching vias
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Create a ground via padstack and place ground stitching vias.

    edbapp.core_padstack.create_padstack(padstackname="GVIA",
                                         holediam="0.3mm",
                                         paddiam="0.5mm",
                                         )

    yloc_u = "$ms_width/2+$ms_clearance+0.25mm"
    yloc_l = "-$ms_width/2-$ms_clearance-0.25mm"

    for i in np.arange(1, 20):
        edbapp.core_padstack.place_padstack([str(i) + "mm", yloc_u], "GVIA", net_name="GND")
        edbapp.core_padstack.place_padstack([str(i) + "mm", yloc_l], "GVIA", net_name="GND")

    # Save and close EDB
    # ~~~~~~~~~~~~~~~~~~
    # Save and close EDB.

    edbapp.save_edb()
    edbapp.close_edb()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    D:\Temp\pcb_X32LH5.aedb
    pyaedt info: Logger started on D:\Temp\pyaedt20220722_091734.log
    pyaedt info: Logger is initialized in EDB.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Refreshing the Components dictionary.
    pyaedt info: Objects Initialized
    pyaedt info: EDB D:\Temp\pcb_X32LH5.aedb was created correctly.
    pyaedt info: EDB was initialized.
    pyaedt info: Creating project variable $ms_width.
    pyaedt info: Creating project variable $ms_clearance.
    pyaedt info: Creating project variable $ms_length.
    pyaedt info: Primitives Updated
    pyaedt info: Padstack GVIA create correctly
    pyaedt info: EDB file release time: 0.00ms

    True



.. GENERATED FROM PYTHON SOURCE LINES 118-121

Open EDB in AEDT
~~~~~~~~~~~~~~~~
Op3n EDB in AEDT.

.. GENERATED FROM PYTHON SOURCE LINES 121-125

.. code-block:: default


    h3d = Hfss3dLayout(projectname=os.path.join(aedb_path, "edb.def"), specified_version="2022.2",
                       non_graphical=non_graphical)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Logger Started
    pyaedt info: Launching PyAEDT outside AEDT with CPython and PythonNET.
    pyaedt info: AEDT installation Path C:\Program Files\AnsysEM\v222\Win64.
    pyaedt info: Launching AEDT with module PythonNET.
    pyaedt info: Ansoft.ElectronicsDesktop.2022.2 Started with process ID 11584.
    pyaedt info: Logger file D:\Temp\pyaedt20220722_091734.log in use.
    pyaedt info: pyaedt v0.5.9
    pyaedt info: Python version 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)]
    pyaedt info: EDB folder D:\Temp\pcb_X32LH5.aedb\edb.def has been imported to project pcb_X32LH5
    pyaedt info: Active Design set to Cell_RYFB66
    pyaedt info: Aedt Objects initialized
    pyaedt info: Variable Manager initialized
    pyaedt info: Design Loaded
    pyaedt info: Successfully loaded project materials !
    pyaedt info: Materials Loaded
    pyaedt info: aedt file load time 0.0
    pyaedt info: Analysis Loaded
    pyaedt info: Loading Modeler.
    pyaedt info: Modeler loaded.
    pyaedt info: EDB loaded.
    pyaedt info: Layers loaded.
    pyaedt info: Primitives loaded.
    pyaedt info: Modeler Loaded




.. GENERATED FROM PYTHON SOURCE LINES 126-129

Create wave ports
~~~~~~~~~~~~~~~~~
Create wave ports.

.. GENERATED FROM PYTHON SOURCE LINES 129-133

.. code-block:: default


    h3d.create_edge_port("line_3", 0, iswave=True, wave_vertical_extension=10, wave_horizontal_extension=10)
    h3d.create_edge_port("line_3", 2, iswave=True, wave_vertical_extension=10, wave_horizontal_extension=10)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Property HFSS Type Changed correctly.
    pyaedt info: Property Horizontal Extent Factor Changed correctly.
    pyaedt info: Property Vertical Extent Factor Changed correctly.
    pyaedt info: Property PEC Launch Width Changed correctly.
    pyaedt info: Property HFSS Type Changed correctly.
    pyaedt info: Property Horizontal Extent Factor Changed correctly.
    pyaedt info: Property Vertical Extent Factor Changed correctly.
    pyaedt info: Property PEC Launch Width Changed correctly.

    'Port2'



.. GENERATED FROM PYTHON SOURCE LINES 134-137

Edit airbox extents
~~~~~~~~~~~~~~~~~~~
Edit airbox extents.

.. GENERATED FROM PYTHON SOURCE LINES 137-141

.. code-block:: default


    h3d.edit_hfss_extents(air_vertical_positive_padding="10mm",
                          air_vertical_negative_padding="1mm")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 142-145

Create setup
~~~~~~~~~~~~
Create an HFSS simulation setup.

.. GENERATED FROM PYTHON SOURCE LINES 145-161

.. code-block:: default


    setup = h3d.create_setup()
    h3d.create_linear_count_sweep(
        setupname=setup.name,
        unit="GHz",
        freqstart=0,
        freqstop=10,
        num_of_freq_points=1001,
        sweepname="sweep1",
        sweep_type="Interpolating",
        interpolation_tol_percent=1,
        interpolation_max_solutions=255,
        save_fields=False,
        use_q3d_for_dc=False,
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Linear count sweep sweep1 has been correctly created.

    <pyaedt.modules.SetupTemplates.SweepHFSS3DLayout object at 0x0000018282A35400>



.. GENERATED FROM PYTHON SOURCE LINES 162-165

Start HFSS solver
~~~~~~~~~~~~~~~~~
Start the HFSS solver by uncommenting the ``h3d.analyze_nominal()`` command.

.. GENERATED FROM PYTHON SOURCE LINES 165-172

.. code-block:: default


    # h3d.analyze_nominal()

    # Release AEDT
    # ~~~~~~~~~~~~
    # Release AEDT.

    h3d.release_desktop()



.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  26.225 seconds)


.. _sphx_glr_download_examples_00-EDB_08_CPWG.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 08_CPWG.py <08_CPWG.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 08_CPWG.ipynb <08_CPWG.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
