
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\06-Multiphysics\Hfss_Icepak_Coupling.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_06-Multiphysics_Hfss_Icepak_Coupling.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_06-Multiphysics_Hfss_Icepak_Coupling.py:


Multiphysics: HFSS-Icepack multiphysics analysis
------------------------------------------------
This example shows how to create a full project from scratch in HFSS and Icepak (linked to HFSS).
The project creates a setup, solves it, and creates postprocessing outputs.

To provide the advanced postprocessing features needed for this example, Matplotlib, NumPy, and
PyVista must be installed on the machine.

This examples runs only on Windows using CPython.

.. GENERATED FROM PYTHON SOURCE LINES 13-16

Perform required imports and set paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Perform required imports and set paths.

.. GENERATED FROM PYTHON SOURCE LINES 16-46

.. code-block:: default


    import os
    import sys
    import tempfile
    import pathlib


    local_path = os.path.abspath("")
    module_path = pathlib.Path(local_path)
    aedt_lib_path = module_path.parent.parent.parent
    pdf_path1 = os.path.join(aedt_lib_path, "pyaedt", "core", "Dlls", "PDFReport")
    sys.path.append(os.path.join(module_path))
    sys.path.append(os.path.join(aedt_lib_path))
    sys.path.append(os.path.join(pdf_path1))
    from pyaedt import generate_unique_name
    from pyaedt.generic.constants import GLOBALCS

    tmpfold = tempfile.gettempdir()


    project_dir = os.path.join(tmpfold, generate_unique_name("Example"))
    if not os.path.exists(project_dir):
        os.makedirs(project_dir)
    print(project_dir)


    from pyaedt import Hfss
    from pyaedt import Icepak






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    D:\Temp\Example_USX4J4




.. GENERATED FROM PYTHON SOURCE LINES 47-50

Launch AEDT
~~~~~~~~~~~
Launch AEDT 2022 R2 in graphical mode. This example uses SI units.

.. GENERATED FROM PYTHON SOURCE LINES 50-54

.. code-block:: default


    non_graphical = os.getenv("PYAEDT_NON_GRAPHICAL", "False").lower() in ("true", "1", "t")
    desktopVersion = "2022.2"








.. GENERATED FROM PYTHON SOURCE LINES 55-58

Open project
~~~~~~~~~~~~
Open the project.

.. GENERATED FROM PYTHON SOURCE LINES 58-63

.. code-block:: default


    NewThread = True
    project_name = "HFSS_Icepak_Coupling"
    project_file = os.path.join(project_dir, project_name + ".aedt")








.. GENERATED FROM PYTHON SOURCE LINES 64-68

Launch AEDT and initialize HFSS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Launch AEDT and initialize HFSS. If there is an active HFSS design, ``aedtapp``
is linked to it. Otherwise, a new design is created.

.. GENERATED FROM PYTHON SOURCE LINES 68-71

.. code-block:: default


    aedtapp = Hfss(specified_version=desktopVersion, non_graphical=non_graphical, new_desktop_session=NewThread)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Logger Started
    pyaedt info: Launching PyAEDT outside AEDT with CPython and PythonNET.
    pyaedt info: AEDT installation Path C:\Program Files\AnsysEM\v222\Win64.
    pyaedt info: Launching AEDT with module PythonNET.
    pyaedt info: Ansoft.ElectronicsDesktop.2022.2 Started with process ID 7140.
    pyaedt info: Logger file D:\Temp\pyaedt20220722_091734.log in use.
    pyaedt info: pyaedt v0.5.9
    pyaedt info: Python version 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)]
    pyaedt info: Project Project52 has been created.
    pyaedt info: No design is present. Inserting a new design.
    pyaedt info: Added design 'HFSS_OUP' of type HFSS.
    pyaedt info: Aedt Objects initialized
    pyaedt info: Variable Manager initialized
    pyaedt info: Design Loaded
    pyaedt info: Successfully loaded project materials !
    pyaedt info: Materials Loaded




.. GENERATED FROM PYTHON SOURCE LINES 72-77

Initialize variable settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Initialize variable settings. You can initialzie a variable simply by creating
it as a list object. If you enter the prefix ``$``, the variable is created for
the project. Otherwise, the variable is created for the design.

.. GENERATED FROM PYTHON SOURCE LINES 77-83

.. code-block:: default


    aedtapp["$coax_dimension"] = "100mm"
    aedtapp.save_project(project_file)
    udp = aedtapp.modeler.Position(0, 0, 0)
    aedtapp["inner"] = "3mm"





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Project HFSS_Icepak_Coupling Saved correctly




.. GENERATED FROM PYTHON SOURCE LINES 84-90

Create coaxial and cylinders
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a coaxial and three cylinders in the modeler. You can apply parameters
directly using the :func:`pyaedt.modeler.Primitives3D.Primitives3D.create_cylinder`
method. You can assign a material directly to the object creation action.
Optionally, you can assign a material using the :func:`assign_material` method.

.. GENERATED FROM PYTHON SOURCE LINES 90-96

.. code-block:: default


    # TODO: How does this work when two truesurfaces are defined?
    o1 = aedtapp.modeler.create_cylinder(aedtapp.PLANE.ZX, udp, "inner", "$coax_dimension", numSides=0, name="inner")
    o2 = aedtapp.modeler.create_cylinder(aedtapp.PLANE.ZX, udp, 8, "$coax_dimension", numSides=0, matname="teflon_based")
    o3 = aedtapp.modeler.create_cylinder(aedtapp.PLANE.ZX, udp, 10, "$coax_dimension", numSides=0, name="outer")








.. GENERATED FROM PYTHON SOURCE LINES 97-100

Assign colors
~~~~~~~~~~~~~
Assign colors to each primitive.

.. GENERATED FROM PYTHON SOURCE LINES 100-107

.. code-block:: default


    o1.color = (255, 0, 0)
    o2.color = (0, 255, 0)
    o3.color = (255, 0, 0)
    o3.transparency = 0.8
    aedtapp.modeler.fit_all()








.. GENERATED FROM PYTHON SOURCE LINES 108-112

Assign materials
~~~~~~~~~~~~~~~~
Assign materials. You can assign materials either directly when creating the primitive,
which was done for ``id2``, or after the object is created.

.. GENERATED FROM PYTHON SOURCE LINES 112-116

.. code-block:: default


    o1.material_name = "Copper"
    o3.material_name = "Copper"








.. GENERATED FROM PYTHON SOURCE LINES 117-121

Perform modeler operations
~~~~~~~~~~~~~~~~~~~~~~~~~~
Perform modeler operations. You can subtract, add, and perform other operations
using either the object ID or object name.

.. GENERATED FROM PYTHON SOURCE LINES 121-125

.. code-block:: default


    aedtapp.modeler.subtract(o3, o2, True)
    aedtapp.modeler.subtract(o2, o1, True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 126-131

Perform mesh operations
~~~~~~~~~~~~~~~~~~~~~~~
Perform mesh operations. Most mesh operations are available.
After a mesh is created, you can access a mesh operation to
edit or review parameter values.

.. GENERATED FROM PYTHON SOURCE LINES 131-136

.. code-block:: default


    aedtapp.mesh.assign_initial_mesh_from_slider(6)
    aedtapp.mesh.assign_model_resolution([o1.name, o3.name], None)
    aedtapp.mesh.assign_length_mesh(o2.faces, False, 1, 2000)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <pyaedt.modules.Mesh.MeshOperation object at 0x000001828ED51A00>



.. GENERATED FROM PYTHON SOURCE LINES 137-143

Create excitations
~~~~~~~~~~~~~~~~~~
Create excitations. The ``create_wave_port_between_objects`` method automatically
identifies the closest faces on a predefined direction and creates a sheet to cover
the faces. It also assigns a port to this face. If ``add_pec_cap=True``, the method
creates a PEC cap.

.. GENERATED FROM PYTHON SOURCE LINES 143-151

.. code-block:: default


    aedtapp.create_wave_port_between_objects("inner", "outer", axisdir=1, add_pec_cap=True, portname="P1")
    aedtapp.create_wave_port_between_objects("inner", "outer", axisdir=4, add_pec_cap=True, portname="P2")

    portnames = aedtapp.get_all_sources()
    aedtapp.modeler.fit_all()






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Deleted 1 Objects: inner_ObjectFromEdge1.
    pyaedt info: Deleted 1 Objects: inner_ObjectFromEdge2.
    pyaedt info: Connection Correctly created
    pyaedt info: aedt file load time 0.0
    pyaedt info: Boundary Wave Port P1 has been correctly created.
    pyaedt info: Deleted 1 Objects: inner_ObjectFromEdge3.
    pyaedt info: Deleted 1 Objects: inner_ObjectFromEdge4.
    pyaedt info: Connection Correctly created
    pyaedt info: Boundary Wave Port P2 has been correctly created.




.. GENERATED FROM PYTHON SOURCE LINES 152-157

Create setup
~~~~~~~~~~~~~
Create a setup. A setup is created with default values. After its creation,
you can change values and update the setup. The ``update`` method returns a Boolean
value.

.. GENERATED FROM PYTHON SOURCE LINES 157-164

.. code-block:: default


    aedtapp.set_active_design(aedtapp.design_name)
    setup = aedtapp.create_setup("MySetup")
    setup.props["Frequency"] = "1GHz"
    setup.props["BasisOrder"] = 2
    setup.props["MaximumPasses"] = 1





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Aedt Objects initialized
    pyaedt info: Variable Manager initialized
    pyaedt info: Design Loaded
    pyaedt info: Successfully loaded project materials !
    pyaedt info: Materials Loaded
    pyaedt info: aedt file load time 0.0




.. GENERATED FROM PYTHON SOURCE LINES 165-168

Create sweep
~~~~~~~~~~~~
Create a sweep. A sweep is created with default values.

.. GENERATED FROM PYTHON SOURCE LINES 168-171

.. code-block:: default


    sweepname = aedtapp.create_linear_count_sweep("MySetup", "GHz", 0.8, 1.2, 401, sweep_type="Interpolating")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Linear count sweep Sweep_0VQK1H has been correctly created.




.. GENERATED FROM PYTHON SOURCE LINES 172-177

Create Icepak model
~~~~~~~~~~~~~~~~~~~
Create an Icepak model. After an HFSS setup is ready, link this model to an Icepak
project and run a coupled physics analysis. The :func:`FieldAnalysis3D.copy_solid_bodies_from`
method imports a model from HFSS with all material settings.

.. GENERATED FROM PYTHON SOURCE LINES 177-181

.. code-block:: default


    ipkapp = Icepak()
    ipkapp.copy_solid_bodies_from(aedtapp)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: No project is defined. Project HFSS_Icepak_Coupling exists and has been read.
    pyaedt info: No consistent unique design is present. Inserting a new design.
    pyaedt info: Added design 'Icepak_FU6' of type Icepak.
    pyaedt info: Aedt Objects initialized
    pyaedt info: Variable Manager initialized
    pyaedt info: Design Loaded
    pyaedt info: Successfully loaded project materials !
    pyaedt info: Materials Loaded
    pyaedt info: aedt file load time 0.0

    True



.. GENERATED FROM PYTHON SOURCE LINES 182-185

Link sources to EM losses
~~~~~~~~~~~~~~~~~~~~~~~~~
Link sources to the EM losses.

.. GENERATED FROM PYTHON SOURCE LINES 185-191

.. code-block:: default


    surfaceobj = ["inner", "outer"]
    ipkapp.assign_em_losses(
        aedtapp.design_name, "MySetup", "LastAdaptive", "1GHz", surfaceobj, paramlist=["$coax_dimension", "inner"]
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Mapping HFSS EM losses.
    pyaedt info: EM losses mapped from design HFSS_OUP.

    <pyaedt.modules.Boundary.BoundaryObject object at 0x0000018293B858E0>



.. GENERATED FROM PYTHON SOURCE LINES 192-195

Edit gravity setting
~~~~~~~~~~~~~~~~~~~~
Edit the gravity setting if necessary because it is important for a fluid analysis.

.. GENERATED FROM PYTHON SOURCE LINES 195-198

.. code-block:: default


    ipkapp.edit_design_settings(aedtapp.GravityDirection.ZNeg)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 199-206

Set Up Icepak project
~~~~~~~~~~~~~~~~~~~~~
Set up the Icepak project. When you create a setup, default settings are applied.
When you need to change a property of the setup, you can use the ``props``
command to pass the correct value to the property. The ``update`` function
applies the settings to the setup. The setup creation process is identical
for all tools.

.. GENERATED FROM PYTHON SOURCE LINES 206-210

.. code-block:: default


    setup_ipk = ipkapp.create_setup("SetupIPK")
    setup_ipk.props["Convergence Criteria - Max Iterations"] = 3








.. GENERATED FROM PYTHON SOURCE LINES 211-215

Edit or review mesh parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Edit or review the mesh parameters. After a mesh is created, you can access
a mesh operation to edit or review parameter values.

.. GENERATED FROM PYTHON SOURCE LINES 215-221

.. code-block:: default


    airbox = ipkapp.modeler.get_obj_id("Region")
    ipkapp.modeler[airbox].display_wireframe = True
    airfaces = ipkapp.modeler.get_object_faces(airbox)
    ipkapp.assign_openings(airfaces)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Opening Assigned

    <pyaedt.modules.Boundary.BoundaryObject object at 0x0000018292120E20>



.. GENERATED FROM PYTHON SOURCE LINES 222-227

Close and open projects
~~~~~~~~~~~~~~~~~~~~~~~
Close and open the projects to ensure that the HFSS - Icepak coupling works
correctly in AEDT versions 2019 R3 through 2021 R1. Closing and opening projects
can be helpful when performing operations on multiple projects.

.. GENERATED FROM PYTHON SOURCE LINES 227-235

.. code-block:: default


    aedtapp.save_project()
    aedtapp.close_project(project_name)
    aedtapp = Hfss(project_file)
    ipkapp = Icepak()
    ipkapp.solution_type = ipkapp.SOLUTIONS.Icepak.SteadyTemperatureAndFlow
    ipkapp.modeler.fit_all()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Project HFSS_Icepak_Coupling Saved correctly
    pyaedt info: Closing the AEDT Project HFSS_Icepak_Coupling
    pyaedt info: Project HFSS_Icepak_Coupling closed correctly
    pyaedt info: Project HFSS_Icepak_Coupling has been opened.
    pyaedt info: Active Design set to HFSS_OUP
    pyaedt info: Aedt Objects initialized
    pyaedt info: Variable Manager initialized
    pyaedt info: Design Loaded
    pyaedt info: Successfully loaded project materials !
    pyaedt info: Materials Loaded
    pyaedt info: aedt file load time 0.03125619888305664
    pyaedt info: No project is defined. Project HFSS_Icepak_Coupling exists and has been read.
    pyaedt info: Active Design set to Icepak_FU6
    pyaedt info: Aedt Objects initialized
    pyaedt info: Variable Manager initialized
    pyaedt info: Design Loaded
    pyaedt info: Successfully loaded project materials !
    pyaedt info: Materials Loaded
    pyaedt info: aedt file load time 0.031247615814208984




.. GENERATED FROM PYTHON SOURCE LINES 236-239

Solve Icepak project
~~~~~~~~~~~~~~~~~~~~
Solve the Icepak project and the HFSS sweep.

.. GENERATED FROM PYTHON SOURCE LINES 239-245

.. code-block:: default


    setup1 = ipkapp.analyze_setup("SetupIPK")
    aedtapp.save_project()
    aedtapp.modeler.fit_all()
    aedtapp.analyze_setup("MySetup")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Solving design setup SetupIPK
    pyaedt info: Design setup SetupIPK solved correctly
    pyaedt info: Project HFSS_Icepak_Coupling Saved correctly
    pyaedt info: Solving design setup MySetup
    pyaedt info: Design setup MySetup solved correctly

    True



.. GENERATED FROM PYTHON SOURCE LINES 246-249

Generate field plots and export
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Generate field plots on the HFSS project and export them as images.

.. GENERATED FROM PYTHON SOURCE LINES 249-272

.. code-block:: default


    cutlist = [GLOBALCS.XY, GLOBALCS.ZX, GLOBALCS.YZ]
    vollist = [o2.name]
    setup_name = "MySetup : LastAdaptive"
    quantity_name = "ComplexMag_E"
    quantity_name2 = "ComplexMag_H"
    intrinsic = {"Freq": "1GHz", "Phase": "0deg"}
    surflist = aedtapp.modeler.get_object_faces("outer")
    plot1 = aedtapp.post.create_fieldplot_surface(surflist, quantity_name2, setup_name, intrinsic)

    results_folder = os.path.join(aedtapp.working_directory, "Coaxial_Results_NG")
    if not os.path.exists(results_folder):
        os.mkdir(results_folder)

    aedtapp.post.plot_field_from_fieldplot(
        plot1.name,
        project_path=results_folder,
        meshplot=False,
        imageformat="jpg",
        view="isometric",
        show=False,
    )




.. image-sg:: /examples/06-Multiphysics/images/sphx_glr_Hfss_Icepak_Coupling_001.png
   :alt: Hfss Icepak Coupling
   :srcset: /examples/06-Multiphysics/images/sphx_glr_Hfss_Icepak_Coupling_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <pyaedt.generic.plot.ModelPlotter object at 0x000001828EBCB0A0>



.. GENERATED FROM PYTHON SOURCE LINES 273-276

Generate animation from field plots
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Generate an animation from field plots using PyVista.

.. GENERATED FROM PYTHON SOURCE LINES 276-305

.. code-block:: default


    import time

    start = time.time()
    cutlist = ["Global:XY"]
    phases = [str(i * 5) + "deg" for i in range(18)]
    animated = aedtapp.post.animate_fields_from_aedtplt_2(
        quantityname="Mag_E",
        object_list=cutlist,
        plottype="CutPlane",
        meshplot=False,
        setup_name=aedtapp.nominal_adaptive,
        intrinsic_dict={"Freq": "1GHz", "Phase": "0deg"},
        project_path=results_folder,
        variation_variable="Phase",
        variation_list=phases,
        show=False,
        export_gif=False,
    )
    animated.gif_file = os.path.join(aedtapp.working_directory, "animate.gif")
    animated.camera_position = [0, 50, 200]
    animated.focal_point = [0, 50, 0]
    # Set off_screen to False to visualize the animation.
    # animated.off_screen = False
    animated.animate()

    endtime = time.time() - start
    print("Total Time", endtime)




.. image-sg:: /examples/06-Multiphysics/images/sphx_glr_Hfss_Icepak_Coupling_002.png
   :alt: Hfss Icepak Coupling
   :srcset: /examples/06-Multiphysics/images/sphx_glr_Hfss_Icepak_Coupling_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Total Time 11.397685766220093




.. GENERATED FROM PYTHON SOURCE LINES 306-310

Create Icepak plots and export
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create Icepak plots and export them as images using the same functions that
were used early. Only the quantity is different.

.. GENERATED FROM PYTHON SOURCE LINES 310-328

.. code-block:: default


    quantity_name = "Temperature"
    setup_name = ipkapp.existing_analysis_sweeps[0]
    intrinsic = ""
    surflist = ipkapp.modeler.get_object_faces("inner")
    plot5 = ipkapp.post.create_fieldplot_surface(surflist, "SurfTemperature")

    ipkapp.post.plot_field_from_fieldplot(
        plot5.name,
        project_path=results_folder,
        meshplot=False,
        imageformat="jpg",
        view="isometric",
        show=False,
    )

    aedtapp.save_project()




.. image-sg:: /examples/06-Multiphysics/images/sphx_glr_Hfss_Icepak_Coupling_003.png
   :alt: Hfss Icepak Coupling
   :srcset: /examples/06-Multiphysics/images/sphx_glr_Hfss_Icepak_Coupling_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Project HFSS_Icepak_Coupling Saved correctly

    True



.. GENERATED FROM PYTHON SOURCE LINES 329-332

Generate plots outside of AEDT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Generate plots outside of AEDT using Matplotlib and Numpy.

.. GENERATED FROM PYTHON SOURCE LINES 332-339

.. code-block:: default


    trace_names = aedtapp.get_traces_for_plot(category="S")
    cxt = ["Domain:=", "Sweep"]
    families = ["Freq:=", ["All"]]
    my_data = aedtapp.post.get_solution_data(expressions=trace_names)
    my_data.plot(trace_names, "db20", xlabel="Frequency (Ghz)", ylabel="SParameters(dB)", title="Scattering Chart")




.. image-sg:: /examples/06-Multiphysics/images/sphx_glr_Hfss_Icepak_Coupling_004.png
   :alt: Scattering Chart
   :srcset: /examples/06-Multiphysics/images/sphx_glr_Hfss_Icepak_Coupling_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyaedt info: Solution Data Correctly Loaded.

    <Figure size 2000x1000 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 340-343

Close project and release AEDT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Close the project and release AEDT.

.. GENERATED FROM PYTHON SOURCE LINES 343-346

.. code-block:: default


    # aedtapp.close_project(aedtapp.project_name)
    aedtapp.release_desktop()




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  26.093 seconds)


.. _sphx_glr_download_examples_06-Multiphysics_Hfss_Icepak_Coupling.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: Hfss_Icepak_Coupling.py <Hfss_Icepak_Coupling.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: Hfss_Icepak_Coupling.ipynb <Hfss_Icepak_Coupling.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
